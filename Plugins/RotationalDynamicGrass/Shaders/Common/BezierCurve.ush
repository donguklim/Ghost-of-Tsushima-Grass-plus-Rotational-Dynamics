#ifndef __ROTATIONAL_DYNAMIC_GRASS_BEZIER_CURVE_HLSL__
#define __ROTATIONAL_DYNAMIC_GRASS_BEZIER_CURVE_HLSL__

#include "Constants.ush"
#include "QuaternionRotation.ush"


void GetRotatedBezierPoints(in float3 inputP1, in float3 inputP2, in float4 angularDisp, out float3 p1, out float3 p2)
{
    
    if (angularDisp.w < ANGLE_THRESHOLD)
    {
        p2 = inputP2;
    }
    else
    {
        p2 = inputP1 + QuatRotateVector(
            QuatFromAxisAngle(float3(0, 1, 0), angularDisp.w),
            inputP2 - inputP1
        );
    }
    
    float angle = length(angularDisp.xyz);
    if (angle < ANGLE_THRESHOLD)
    {
        p1 = inputP1;
        return;
    }
    
    float3 axis = angularDisp.xyz / angle;
        
    FQuat bar1Quat = QuatFromAxisAngle(axis, angle);
        
    p1 = QuatRotateVector(bar1Quat, inputP1);
    p2 = QuatRotateVector(bar1Quat, p2);
}


void GetRotatedBezierPoints(in float3 inputP1, in float3 inputP2, in float4 angularDisp, out float3 p1, out float3 p2, out float3 sideDir)
{
    if (angularDisp.w < ANGLE_THRESHOLD)
    {
        p2 = inputP2;
    }
    else
    {
        p2 = inputP1 + QuatRotateVector(
            QuatFromAxisAngle(float3(0, 1, 0), angularDisp.w),
            inputP2 - inputP1
        );
    }
    
    float angle = length(angularDisp.xyz);
    if (angle < ANGLE_THRESHOLD)
    {
        p1 = inputP1;
        return;
    }
    
    float3 axis = angularDisp.xyz / angle;
        
    FQuat bar1Quat = QuatFromAxisAngle(axis, angle);
        
    p1 = QuatRotateVector(bar1Quat, inputP1);
    p2 = QuatRotateVector(bar1Quat, p2);
        
    sideDir = QuatRotateVector(bar1Quat, float3(0, 1, 0));
}


float GetBezierCurveLength(in float3 bar1, in float3 p2)
{
    /*
        solving quadratic bezier curve length boils down to integrating
        sqrt(a * t^2 + b * t  + c) 
        with t in range [0, 1]
        a = |bar1 - bar2|^2
        b = 2(dot(bar1, bar2) - |bar1|^2)
        c = |bar1|^2
        
        4ac - b2 = |bar1|^2 * |bar2|^2 - (dot(bar1, bar2))^2 
                 = (|bar1||bar2|)^2(1 - cos^2(angle between the bars))
        4ac - b2 >= 0
    */
    
    float3 bar2 = p2 - bar1;
        
    float bar1_length = length(bar1);
    float bar2_length = length(bar2);
    
    float sqrt_a_val = length(bar1 - bar2);
    float a_val = sqrt_a_val * sqrt_a_val;
    
    // The case bar1 and bar2 form a near straight line and has the same length
    if (a_val < 0.01)
    {
        return bar1_length + bar2_length;
    }
    
    float c_val = bar1_length * bar1_length;
    
    float bar1_dot_bar2 = dot(bar1, bar2);
    float b_val = (bar1_dot_bar2 - c_val) * 2;
          
    float discriminant = 4 * a_val * c_val - b_val * b_val;
    
    // bar1 and bar2 are nearlly aligned in either opposite or the same direction.    
    if (discriminant < 0.01)
    {
        // bar1 and bar2 has the same or almost the same direction.
        if (bar1_dot_bar2 > 0)
        {
            return bar1_length + bar2_length;
        }
        
        // bar1 and bar2 has almost opposite direction
        return (c_val + bar2_length * bar2_length) / (bar1_length + bar2_length);
            
    }
    
    // solution for the integration when descrimnant is positive
    float term1 = (2 * a_val + b_val) / sqrt(discriminant);
    float term2 = sqrt(1 + term1 * term1);
    float term3 = b_val / sqrt(discriminant);
    float term4 = sqrt(1 + term3 * term3);
    
    return 2 * discriminant / (8 * a_val * sqrt_a_val) * (
        (term2 * term1 + log(term2 + term1)) 
        - (term4 * term3 + log(term4 + term3))
    );
}

#endif // __ROTATIONAL_DYNAMIC_GRASS_BEZIER_CURVE_HLSL__
