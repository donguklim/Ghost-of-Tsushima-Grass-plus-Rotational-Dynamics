#ifndef __ROTATIONAL_DYNAMIC_GRASS_GRASS_ATTRIBUTES_HLSL__
#define __ROTATIONAL_DYNAMIC_GRASS_GRASS_ATTRIBUTES_HLSL__


#include "Common/Constants.ush"
#include "Common/Random.ush"
#include "Common/QuaternionRotation.ush"
#include "GradientNoise.ush"


#define GRAVITY 0.981
#define RELATIVE_STIFFNESS_MIN 0.1


// get equlilibrium angle between up direction and the bent direciton
float findEquilibriumAngle(float gravityScale, float yScale, float barLength, float stiffness)
{
    float barLengthSquare = barLength * barLength;
    
     /*
        sin(x) / x -> 1 as x ->0
        
        L^2 * gravity / 2 * sin(x)/x = S
            
        An equilibrium state is reached at x = 0 if L^2 * gravity / 2 = S
        
        Hence, if S > L^2 * gravity / 2, gravity won't move the bar due to strong stiffness.
            
    */
    
    // case stiffness is strong
    if (2 * stiffness > gravityScale * GRAVITY * yScale * barLengthSquare)
    {
        return 0;
    }

    /*
        we want to find angle of the bar from the gravity force direction where 
            
            gravity force torque = sitffness * angle
            gravity force * (bar length)^2/2 * sin(x) = stiffness * x
    
        use tylor series approximation sin(x) = x - x^3/3! + x^5/5!
            (This sin approximation works bad with |x| > 0.5 PI)
    
        then x^2 = 10 +- sqrt(100 + 120 *(2 * stiffness / ( gravity force * bar1 length^2) - 1))
    
        find the smallest solution within range of [0, PI]
         
    
    */

    float discriminant = 100.0f + 120.0f * (2.0f * stiffness / (gravityScale * GRAVITY * yScale * barLengthSquare) - 1.0f);
    
    // Either gravity is not strong enough to make equilibrium bending, or resotoration force cannot be strong enough to resist gravity
    // Weaker gravity case is handled above, so this is stonger gravity case
    if (discriminant < 0.0f)
    {
        return PI_VALUE;
    }
    
    float sqrtDiscriminant = sqrt(discriminant);
    
    float angleSquare = sqrtDiscriminant > 10.0f ? 10.0f + sqrtDiscriminant : 10.0f - sqrtDiscriminant;
    return sqrt(angleSquare);

}


float getClumpPositionRandVal(
    float positionNoiseRatio, 
    inout uint clumpSeed, 
    inout uint positionSeed
)
{
    return clamp(FRand(clumpSeed) * GetNoiseMultiplier(positionSeed, positionNoiseRatio), 0.0, 1.0f);

}


void GetGrassttributes(
    uint clumpSeed,
    in float clumpLengthScale,
    in float gravityScale,
    in float yScaleMin,
    in float yScaleMax,
    in float stiffnessMin,
    in float stiffnessMax,
    in float p1StiffnessRatioMin,
    in float p1StiffnessRatioMax,
    in float p2StiffnessRatioMin,
    in float positionNoiseRatio,
    in float3 position,
    in FQuat quatRotation,
    out float3 landNormal,
    out float3 scale,
    out FQuat staticOrientation,
    out float stiffness, 
    out float3 colorNoise,
    out float2 p1Position,
    out float2 pivotStiffnessRatio
)
{
        
    landNormal = QuatRotateVector(quatRotation, float3(0, 0, 1));
    uint positionSeed = ComputeSeedFromPosition(position);

    float growth = 0.2f + 0.8f * pow(FRand(positionSeed), 0.25);
    float stiffnessAdjustParam = getClumpPositionRandVal(0.05, clumpSeed, positionSeed);
    stiffness = lerp(stiffnessMin, stiffnessMax, stiffnessAdjustParam);

    stiffness *= clumpLengthScale * clumpLengthScale * growth * growth;
  
     
    float relativeStiffness = stiffness / stiffnessMax;
  
    
    float grassFlowSpeed = lerp(0.4f, 1.6f, FRand(clumpSeed));
    
    float yaw = grassFlowSpeed * LeveledGradientNoise(
        FRand(clumpSeed),
        position.xy / 3200.0,
        1,
        4,
        -PI_VALUE * 8,
        PI_VALUE * 8
    ) + positionNoiseRatio * 0.5 * lerp(-PI_VALUE, PI_VALUE, FRand(positionSeed));
   

    FQuat yawQaut = QuatFromAxisAngle(
        float3(0, 0, 1),
        yaw
    );
    
    FQuat minPitchQuat = QuatMultiply(
        quatRotation,
        yawQaut
    );
    
    float3 zeroPitchDirection = QuatRotateVector(minPitchQuat, float3(1, 0, 0));
    
    float upDirectionPitch = acos(dot(float3(0, 0, 1), zeroPitchDirection));
    float maxPitch = upDirectionPitch * 0.98;
    maxPitch = MIN_GRASS_PITCH < maxPitch ? maxPitch : MIN_GRASS_PITCH;
    
    float p0Angle = -lerp(
        max(MIN_GRASS_PITCH, 0.8f * maxPitch),
        maxPitch,
        getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed)
    );
    
    float yScale = lerp(yScaleMin, yScaleMax, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed)) * growth;
    
    
    float bar2LengthRatio = lerp(0.5, 1.0f, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed));
    
    float upAndPitchAngleDiff = abs(upDirectionPitch + p0Angle);
    float angleBySinVal = upAndPitchAngleDiff < 0.02f ? 1.0f : upAndPitchAngleDiff / sin(upAndPitchAngleDiff);
    float bar1Length = sqrt(2 * relativeStiffness * angleBySinVal / (gravityScale * GRAVITY * yScale));
    float bar2Length = bar1Length * bar2LengthRatio;
    
    float p1StiffnessRatioAdjustParam = getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed);
    
    float p1StiffnessRatio = lerp(
        p1StiffnessRatioMin,
        p1StiffnessRatioMax,
        p1StiffnessRatioAdjustParam
    );
    
    
    /* 
        make gravity stronger on  p1Angle
        because in reality static bendage of grass would still exsit in absense of gravity.
        which means the static bendage of grass is not equal to the bandage of a straight grass with the same stiffness due to gravitiy.
    */

    float p1Angle = findEquilibriumAngle(
        gravityScale * 3.0f,
        yScale,
        bar2Length,
        relativeStiffness * p1StiffnessRatio
    );
    
    FQuat bar1Orientation = QuatMultiply(
        quatRotation,
        QuatMultiply(
            yawQaut,
            QuatFromAxisAngle(
                float3(0, 1, 0),
                p0Angle
            )
        )
    );

    float3 bar1Direction = QuatRotateVector(bar1Orientation, float3(1, 0, 0));
    /*
        given v = bar1 + bar2
        
        we want dot(bar1, v) / |v| < |v|, 
    
        Otherwise the projected vector of bar1 on v is longer than v, make grass bending look unnatural.
        Above equation is equlivalent to
    
            -|bar2| / |bar1| <= cos(angle btween bar1 and bar2)
    
    */
    float p1AngleMax = min(
        acos(-bar2LengthRatio), 
        min(
            PI_VALUE - acos(bar1Direction.z), 
            PI_VALUE - P1_ANGLE_THRESHOLD
        )
    );
    
    p1Angle = clamp(p1Angle, 0.0f, p1AngleMax);
   
    
    // If somehow ground up face is facing downward, in this case bar 1 pointing direction should be near to the gravity direction.
    if (landNormal.z < 0)
    {
        //To do

    }
    
    /*
        The length of a grass when it is straight toward up, and when |bar1| == |bar2|,
        Let L be the length then,
    
        L^2 = 4|bar1|^2 = 8 * (relative stiffness) / gravity * (lim x->0 (sin(x)/x))
            = 8 * (relative stiffness) / gravity
    
        maximum length is achieved when (relative stiffness) == 1,
    
        max L^2 = 8 / gravity
        
    */
    
    float p2StiffnessRatio = lerp(
        min(p1StiffnessRatio, p2StiffnessRatioMin), 
        p1StiffnessRatio, 
        getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed)
    );

    // bar1 and bar2 not scaled
    float3 bar1 = float3(bar1Length, 0, 0);
    float3 bar2 = bar2Length * float3(cos(p1Angle), 0, sin(-p1Angle));
    float3 p0p2 = bar1 + bar2;
    
    float p0p2Length = length(p0p2);
    
    bar1 /= p0p2Length;
    bar2 /= p0p2Length;
    p0p2 /= p0p2Length;
    
    float3 p1Xvec = dot(bar1, p0p2) * p0p2;
    float p1Ypos = length(bar1 - p1Xvec);
    float p1Xpos = length(p1Xvec);
    
    scale = float3(
        p0p2Length,
        yScale,
        p0p2Length
    );
    
    p1Position = float2(
        p1Xpos,
        p1Ypos
    );

    // by projecting p2 to (0 ,0, 1), bar1 is rotated with the angle of p0p2 vector.
    p0Angle += acos(p0p2.x);
    
    FQuat landLocalOrientation = QuatMultiply(
        yawQaut,
        QuatFromAxisAngle(
            float3(0, 1, 0),
            p0Angle
        )
    );
    staticOrientation = QuatMultiply(quatRotation, landLocalOrientation);
    
    colorNoise = float3(
        lerp(0.0f, 1.0f, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed)),
        lerp(0.0f, 1.0f, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed)),
        lerp(0.0f, 1.0f, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed))
    );
    
    pivotStiffnessRatio = float2(p1StiffnessRatio, p2StiffnessRatio);
    
    // too low stiffness can cause weird motions.
    stiffness = max(stiffness, 0.5f);
    
}

#endif // __ROTATIONAL_DYNAMIC_GRASS_GRASS_ATTRIBUTES_HLSL__
