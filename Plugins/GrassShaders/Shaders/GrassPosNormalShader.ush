

struct GrassShaderFunctions
{
    
    float GetAngle(float2 vec)
    {
        float2 normalizedVector = normalize(vec);
    
        float angle = acos(normalizedVector.x);
 
        if (normalizedVector.y < 0)
        {
            angle = -angle;
        }
    
        return angle;
    }

    float3 RotateZ(float3 vec, float angle)
    {
        float s = sin(angle);
        float c = cos(angle);
    
        float3x3 rotationMatrix = float3x3(
             c, -s, 0,
             s, c, 0,
             0, 0, 1
        );
    
        return mul(rotationMatrix, vec);
    }
    
    float4 QuaternionFromAxisAngle(float3 axis, float angle)
    {
        float halfAngle = angle * 0.5;
        float s = sin(halfAngle);
        return float4(axis * s, cos(halfAngle));
    }
    
    float4 QuaternionFromRotationalVector(float3 vec)
    {
        float angle = length(vec);
        vec = angle > 0 ? vec / angle : vec;
        return QuaternionFromAxisAngle(vec, angle);

    }

    float4 QuaternionMultiply(float4 q1, float4 q2)
    {
        return float4(
            q1.w * q2.xyz + q2.w * q1.xyz + cross(q1.xyz, q2.xyz),
            q1.w * q2.w - dot(q1.xyz, q2.xyz)
        );
    }

    float3 RotateVectorByQuaternion(float3 v, float4 q)
    {
        float3 qVec = q.xyz;
        float3 uv = cross(qVec, v);
        float3 uuv = cross(qVec, uv);
        return v + ((uv * q.w) + uuv) * 2.0;
    }
    
    float GetBezierCurveLength(float3 bar1, float3 p2)
    {
        float3 bar2 = p2 - bar1;
        
        float sqrt_c_val = length(bar1);
        float c_val = sqrt_c_val * sqrt_c_val;
        float b_val = (dot(bar1, bar2) - c_val) * 2;
        
        float sqrt_a_val = length(bar1 - bar2);
        float a_val = sqrt_a_val * sqrt_a_val;
        
        float quad_term = 4 * a_val * c_val - b_val * b_val;
        float b_over_2a = b_val / (2 * a_val);
        
        if (quad_term < 0.01)
        {
            if (b_over_2a <= -1)
            {
                return -2.0 * sqrt_a_val * (0.5 + b_over_2a);

            }
            else if (b_over_2a >= 0)
            {
                return 2.0 * sqrt_a_val * (0.5 + b_over_2a);
            }
            
            return 2.0 * sqrt_a_val * (0.5 + b_over_2a - b_over_2a * b_over_2a * 3);
            
        }
        
        float sum_sqrt = sqrt(a_val + b_val + c_val);
        
        return (
            ((2 * a_val + b_val) * sum_sqrt - b_val * sqrt_c_val) / (4 * a_val)
            + sqrt_a_val * quad_term / (8 * a_val) * (log(abs(1 + b_over_2a + sum_sqrt / sqrt_a_val)) - log(abs(b_over_2a + sqrt_c_val / sqrt_a_val)))
        ) * 2.0;
    }
    
    float3 GrassPosOffsetAndNormal(
        in float2 uv, float4 p1, float4 p2, float scale, float width, float base,
        float3 angular_disp,
        float3 viewing_dir,
        float mid_smooth, float rim_pos, float rim_smooth, float y_strength, out float3 normal
    )
    {
        float vec_length_threshold = 0.00001;
        float t = uv.x;
        float g = uv.y;

        float s = 1 - t;
        float s2 = s * s;
        float t2 = t * t;

        float g_axis_val = g - 0.5;
        
        // initialize points at static positions
        p1.w = p1.w > 1 ? 1 : p1.w;
        p2.w = p1.w < p2.w ? p1.w : p2.w;
        float4 p0 = float4(0, 0, 0, 1);
        
        float4 curve = s2 * p0 + 2 * s * t * p1 + t2 * p2;
        float3 curve_tangent = 2 * s * (p1.xyz) + 2 * t * (p2.xyz - p1.xyz);
        
        float3 curve_length = GetBezierCurveLength(p1.xyz, p2.xyz);
        
        /* tilt xy_plane norm abount the curve tangent */
        float vec_length = length(curve_tangent);
        float3 unit_tangent = (vec_length > vec_length_threshold) ? (curve_tangent / vec_length) : curve_tangent;
        
        
        // make twist from p0 rotation
        float3 side_dir = RotateVectorByQuaternion(float3(0, 1, 0), QuaternionFromRotationalVector(angular_disp * (1.0 - curve.w + p2.w * t)));
        
        float tilt_amount = dot(side_dir, viewing_dir) * 0.8;
        side_dir = RotateVectorByQuaternion(side_dir, QuaternionFromRotationalVector(unit_tangent * tilt_amount));

        
        /* get position offset */
        // scale the curve and subtract the x, y value of the original rectangle rectangle mesh 
        
        float3 pos_offset = scale * (curve.xyz / curve_length * 2 + g_axis_val * s * (t + base) * width * side_dir - float3(t, g_axis_val, 0));
       
    
        /* get normal */
        float3 curve_norm = cross(curve_tangent, side_dir);

        float smoothing_value = saturate((g_axis_val + mid_smooth) / (mid_smooth * 2));
        float middle_value = smoothing_value * smoothing_value * (3.0 - 2.0 * smoothing_value);

        float rim_smoothing_value = saturate((abs(g_axis_val) - rim_pos + rim_smooth) / (rim_smooth * 2));
        float rim_value = rim_smoothing_value * rim_smoothing_value * (3.0 - 2.0 * rim_smoothing_value);

        float linear_value = (1.0 - middle_value) * rim_value + middle_value * (1.0 - rim_value);

        float y = (1 - 2 * linear_value) * y_strength;
        float3 normal_vector = curve_norm + y * side_dir;
        vec_length = length(normal_vector);

        normal = (vec_length > vec_length_threshold) ? (normal_vector / vec_length) : normal_vector;
    
        return pos_offset;
    }
    
    
    float3 GrassPosOffsetAndNormal(
        in float2 uv, float4 p1, float4 p2, float scale, float width, float base,
        float3 xy_norm,
        float tilt,
        float mid_smooth, float rim_pos, float rim_smooth, float y_strength, out float3 normal
    )
    {
        float vec_length_threshold = 0.00001;
        float t = uv.x;
        float g = uv.y;

        float s = 1 - t;
        float s2 = s * s;
        float t2 = t * t;

        float g_axis_val = g - 0.5;
        
        // initialize points at static positions
        p1.w = p1.w > 1 ? 1 : p1.w;
        p2.w = p1.w < p2.w ? p1.w : p2.w;
        float4 p0 = float4(0, 0, 0, 1);
        
        float3 curve_length = GetBezierCurveLength(p1.xyz, (p2 - p1).xyz);
        
        float4 curve = s2 * p0 + 2 * s * t * p1 + t2 * p2;
        float3 curve_tangent = 2 * s * (p1.xyz) + 2 * t * (p2.xyz - p1.xyz);
        
        /* tilt xy_plane norm abount the curve tangent */
        float vec_length = length(curve_tangent);
        float3 unit_tangent = (vec_length > vec_length_threshold) ? (curve_tangent / vec_length) : curve_tangent;

        float tilt_amount = p2.w / curve.w * tilt;
        
        // float tilt_amount = tilt;

        float tilt_cos = cos(tilt_amount);
        float tilt_sin = sin(tilt_amount);
        xy_norm = xy_norm * tilt_cos + cross(unit_tangent, xy_norm) * tilt_sin;

    
        /* get position offset */
        // scale the curve and subtract the x, y value of the original rectangle rectangle mesh 
        
        float3 pos_offset = scale * (curve.xyz / curve_length + g_axis_val * s * (t + base) * width * xy_norm - float3(t, g_axis_val, 0));
        
        //float3 pos_offset = scale * (curve.xyz + g_axis_val * xy_norm - float3(t, g_axis_val, 0));
    
    
        /* get normal */
        float3 curve_norm = cross(curve_tangent, xy_norm);

        float smoothing_value = saturate((g_axis_val + mid_smooth) / (mid_smooth * 2));
        float middle_value = smoothing_value * smoothing_value * (3.0 - 2.0 * smoothing_value);

        float rim_smoothing_value = saturate((abs(g_axis_val) - rim_pos + rim_smooth) / (rim_smooth * 2));
        float rim_value = rim_smoothing_value * rim_smoothing_value * (3.0 - 2.0 * rim_smoothing_value);

        float linear_value = (1.0 - middle_value) * rim_value + middle_value * (1.0 - rim_value);

        float y = (1 - 2 * linear_value) * y_strength;
        float3 normal_vector = curve_norm + y * xy_norm;
        vec_length = length(normal_vector);

        normal = (vec_length > vec_length_threshold) ? (normal_vector / vec_length) : normal_vector;
    
        return pos_offset;
    }
};


    
