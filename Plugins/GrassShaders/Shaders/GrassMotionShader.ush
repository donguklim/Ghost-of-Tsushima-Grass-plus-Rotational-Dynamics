
#define PI_VALUE 3.14159265358979323846


struct GrassMotionShaderFunctions
{
    
    float4 QuaternionFromAxisAngle(float3 axis, float angle)
    {
        float halfAngle = angle * 0.5;
        float s = sin(halfAngle);
        return float4(axis * s, cos(halfAngle));
    }
    
    float4 QuaternionFromRotationalVector(float3 vec)
    {
        float angle = length(vec);
        vec = angle > 0 ? vec / angle : vec;
        return QuaternionFromAxisAngle(vec, angle);

    }

    float4 QuaternionMultiply(float4 q1, float4 q2)
    {
        return float4(
            q1.w * q2.xyz + q2.w * q1.xyz + cross(q1.xyz, q2.xyz),
            q1.w * q2.w - dot(q1.xyz, q2.xyz)
        );
    }

    float3 RotateVectorByQuaternion(float3 v, float4 q)
    {
        float3 qVec = q.xyz;
        float3 uv = cross(qVec, v);
        float3 uuv = cross(qVec, uv);
        return v + ((uv * q.w) + uuv) * 2.0;
    }
    
    float ShiftToPIAtMaxAngle(float angle)
    {
        angle = fmod(angle, 2.0 * PI_VALUE);

        if (angle > PI_VALUE)
        {
            angle -= 2.0 * PI_VALUE;
        }
        else if (angle < -PI_VALUE)
        {
            angle += 2.0 * PI_VALUE;
        }

        return angle;
    }

    float ShiftToPositiveAngle(float angle)
    {
        angle = fmod(angle, 2.0 * PI_VALUE);

        if (angle < 0)
        {
            angle += 2.0 * PI_VALUE;
        }

        return angle;
    }

    float3 RotateY(float3 vec, float angle)
    {
        float s = sin(angle);
        float c = cos(angle);
    
        float3x3 rotationMatrix = float3x3(
            c, 0, s,
            0, 1, 0,
            -s, 0, c
        );
    
        return mul(rotationMatrix, vec);
    }
    
    float3 RotateZ(float3 vec, float angle)
    {
        float s = sin(angle);
        float c = cos(angle);
    
        float3x3 rotationMatrix = float3x3(
             c, -s, 0,
             s, c, 0,
             0, 0, 1
        );
    
        return mul(rotationMatrix, vec);
    }
    
    void GetBezierPointsOld(float2 p1_xz, float2 p2_xz, float4 angular_disp, out float3 p1, out float3 p2)
    {
        //angular_disp.y = angular_disp.y > 0 ? 0 : angular_disp.y;
        p1 = RotateY(float3(p1_xz.x, 0, p1_xz.y), angular_disp.y);
        p2 = RotateY(float3(p2_xz.x, 0, p2_xz.y), angular_disp.y);
        
        
        float3 p1p2 = RotateY(p2 - p1, angular_disp.w);
        p2 = p1 + p1p2;
        
        p1 = RotateZ(p1, angular_disp.z);
        p2 = RotateZ(p2, angular_disp.z);
        
    }
    
    float GetSecondRodTorque(
        float damping_coefficient,
        float r1_stiffness,
        float r2_stiffness,
        float r1_angular_displacement,
        float r2_angular_displacement,
        float r1_angular_velocity,
        float r2_angular_velocity,
        float3 r1_end,
        float3 r2_end,
        float3 wind_force,
        float3 rotational_axis,
        float3 r2_rotational_axis
    )
    {
        float3 r2 = (r2_end - r1_end);
        float r2_length = length(r2);
        float r2_length_square = r2_length * r2_length;
        float3 r2_dir = r2;
        
        float3 r2_torque_dir = cross(r2_rotational_axis, r2_dir);
        
        float3 l0_force_term = wind_force - 2.0 * r2_stiffness * r2_angular_displacement / r2_length_square * r2_torque_dir;
        float3 l1_force_term = -damping_coefficient * r2_angular_velocity * r2_torque_dir;
        float3 l0_term_vec = cross(r1_end, l0_force_term);
        float3 l1_term_vec = cross(r2_dir, l0_force_term) + cross(r1_end, l1_force_term);
        float3 l2_term_vec = cross(r2_dir, l1_force_term);
        
        float r1_damping = -damping_coefficient * r1_angular_velocity;
        float l0_damping_term = r1_damping * r2_length_square;
        float l1_damping_term = r1_damping * 2 * dot(r1_angular_displacement, r2_dir);
        
        float l0_term = dot(l0_term_vec, rotational_axis) + l0_damping_term;
        float l1_term = dot(l1_term_vec, rotational_axis) + l1_damping_term;
        float l2_term = dot(l2_term_vec, rotational_axis) + r1_damping;
        
        return l0_term * r2_length + l1_term * r2_length_square / 2.0 + l2_term * r2_length * r2_length_square / 3.0;

    }
    
    void GetBezierPoints(float2 p1_xz, float2 p2_xz, float4 angular_disp, out float3 p1, out float3 p2)
    {
        p1 = float3(p1_xz.x, 0, p1_xz.y);
        p2 = float3(p2_xz.x, 0, p2_xz.y);
        
        float r1_disp_angle = length(angular_disp.xyz);
        float4 p1_quat = QuaternionFromRotationalVector(angular_disp.xyz);
        float4 p1p2_quat = QuaternionFromAxisAngle(float3(0, 1, 0), angular_disp.w);
        
        float3 p1p2 = RotateVectorByQuaternion(p2 - p1, p1p2_quat);
        p2 = p1 + p1p2;
        
        p1 = RotateVectorByQuaternion(p1, p1_quat);
        p2 = RotateVectorByQuaternion(p2, p1_quat);
        
    }
    
    float3 GetDistantRodTorque(
        float damping_coefficient,
        float3 wind_force,
        float r2_stiffness,
        float r2_angular_velocity,
        float r2_angular_displacement,
        float3 r2_rotational_axis,
        float r1_stiffness,
        float3 r1_angular_velocity,
        float3 r1_angular_displacement,
        float3 r1_end,
        float3 r2_end
    )
    {
        float3 r2 = (r2_end - r1_end);
        float r2_length = length(r2);
        float r2_length_square = r2_length * r2_length;
        float3 r2_dir = r2;
        
        float3 r2_torque_dir = cross(r2_rotational_axis, r2_dir);
        
        float3 l0_force_term = wind_force - 2.0 * r2_stiffness * r2_angular_displacement / r2_length_square * r2_torque_dir - damping_coefficient * cross(r1_angular_velocity, r1_end);
        float3 l1_force_term = -damping_coefficient * r2_angular_velocity * r2_torque_dir - damping_coefficient * cross(r1_angular_velocity, r2_dir);
        float3 l0_term = cross(r1_end, l0_force_term);
        float3 l1_term = cross(r2_dir, l0_force_term) + cross(r1_end, l1_force_term);
        float3 l2_term = cross(r2_dir, l1_force_term);
        
        
        return l0_term * r2_length + l1_term * r2_length_square / 2.0 + l2_term * r2_length * r2_length_square / 3.0;

    }
    float3 GetPivotRodTorque(
        float damping_coff,
        float stiffness,
        float3 wind_force,
        float3 rod,
        float3 angular_velocity,
        float3 angular_disp
    )
    {
        float rod_length = length(rod);
        float3 wind_torque = cross(rod, wind_force) * rod_length / 2.0;
        float3 damping_torque = -damping_coff * cross(rod, cross(angular_velocity, rod)) * rod_length / 3.0;
       
        return rod_length * (cross(rod, wind_force) / 2.0 - damping_coff * cross(rod, cross(angular_velocity, rod)) / 3.0) - stiffness * angular_disp;
       
    }
    
    float GetSingleRodTorque(
        float damping_coff,
        float stiffness,
        float3 wind_force,
        float3 rod,
        float3 rotational_axis,
        float angular_velocity,
        float angular_disp
    )
    {
        float rod_length = length(rod);
        
        float3 wind_torque_vec = cross(rod, wind_force) * rod_length / 2.0;
        float damping_torque = -damping_coff * angular_velocity * rod_length * rod_length * rod_length / 3.0;
        float restore_torque = -stiffness * angular_disp;
       
        return damping_torque + restore_torque + dot(wind_torque_vec, rotational_axis);
       
    }
    
    float GetMomentOfInertia(float mass, float3 r1_end, float3 r2_end)
    {
        float3 r2 = r2_end - r1_end;
        float r2_length = length(r2);
        float r1_length = length(r1_end);
        float r2_center_distance = length(r2 / 2 + r1_end);
        
        float r2_mass = mass * r2_length / (r1_length + r2_length);
        
        // Moment of Inertia caused by R2 rod
        // = Moment of Inertia of R2 at its center of mass + (R2 center of mass distance from the pivot)^2
        //
        // Moment of Inertia of R2 at its center of mass = r2_mass * r2_length * r2_length / 12.0
        float r2_MI = r2_mass * (r2_length * r2_length / 12.0 + r2_center_distance * r2_center_distance);
        
        float r1_MI = (mass - r2_mass) / 3.0 * r1_length * r1_length;
        
        return r1_MI + r2_MI;
    
    }
    
    float GetAngularAcc(
        float wind_coff,
        float damping_coff,
        float stiffness,
        float mass,
        float3 wind,
        float3 edge,
        float3 rotating_dir,
        float3 axis_dir,
        float angular_velocity,
        float angular_disp,
        out float3 debug_wind_force
    )
    {
        float edge_length = length(edge);
        float3 edge_dir = edge_length > 0 ? edge / edge_length : edge;
        
        float vec_length = length(rotating_dir);
        rotating_dir = vec_length > 0 ? rotating_dir / vec_length : rotating_dir;
        
        vec_length = length(axis_dir);
        axis_dir = vec_length > 0 ? axis_dir / vec_length : axis_dir;
               
        // actually bellow variables with torque in the names are actually torque divided by edge length
        float damping_torque = -damping_coff * angular_velocity;
        float restore_torque = (angular_disp > 0 ? -1 : 1) * abs(stiffness * angular_disp);
        //float wind_torque = wind_coff * dot(wind, rotating_dir) * abs(cross(axis_dir, edge_dir));
        
        float wind_torque = wind_coff * dot(wind, rotating_dir) * dot(cross(edge_dir, rotating_dir), axis_dir);
        
        if (wind_torque < 0)
        {
            debug_wind_force = -edge * 10;
        }
        else
        {
            debug_wind_force = edge * 10;
        }
        
        debug_wind_force = float3(wind_torque, restore_torque, 0);
        
        
        return (wind_torque + damping_torque + restore_torque) / (edge_length * mass);
    }
    
    float GetFirstPivotAngularAcc(
        float wind_coff,
        float damping_coff,
        float stiffness,
        float r2_stiffness,
        float mass,
        float3 wind,
        float3 r1_end,
        float3 r2_end,
        float3 rotational_axis,
        float3 r2_rotational_axis,
        float angular_velocity,
        float angular_disp,
        float r2_angular_velocity,
        float r2_angular_disp
    )
    {
        return GetSingleRodTorque(
            damping_coff,
            stiffness, 
            wind_coff * wind, r1_end, 
            rotational_axis, 
            angular_velocity, 
            angular_disp
        ) + GetSecondRodTorque(
            damping_coff,
            stiffness,
            r2_stiffness,
            angular_disp,
            r2_angular_disp,
            angular_velocity,
            r2_angular_velocity,
            r1_end,
            r2_end,
            wind_coff * wind,
            rotational_axis,
            r2_rotational_axis
        ) / GetMomentOfInertia(mass, r1_end, r2_end);
    }
    
    void GrassUpdateOld(
        float damping_coff,
        float swing_damping_coff,
        float wind_coff,
        float stiffness,
        float swing_stiffness,
        float mass,
        float time_delta,
        float3 wind,
        float2 p1_xz,
        float2 p2_xz,
        inout float4 angular_velocity,
        inout float4 angular_disp,
        out float3 wind_z_force
    )
    {
        float swing_threshold = PI_VALUE * 0.98;
        float p1_threshold_low = PI_VALUE * 0.02;
        float p1_threshold_high = PI_VALUE * 1.98;
        float p1p2_threshold = PI_VALUE * 0.02;
        
        
        if (p1_xz.x < 0)
        {
            p1_xz.x = 0.01;
        }
        float p1_static_bending = atan(p1_xz.y / p1_xz.x);
        
        float2 p1p2_xz = p2_xz - p1_xz;
        float p1p2_static_bending = acos(dot(-p1_xz, p1p2_xz) / (length(p1_xz) * length(p1p2_xz)));

        float3 p1 = float3(0, 0, 0);
        float3 p2 = float3(0, 0, 0);
        GetBezierPoints(p1_xz, p2_xz, angular_disp, p1, p2);
        float3 p1p2 = p2 - p1;
        
        
        float3 wind_force = wind;
        float swing_abs = abs(angular_disp.z);
        if (swing_abs > swing_threshold)
        {
            //wind_force = float3(0, 0, 0);
        }
        
        float3 swing_rotating_dir = RotateZ(float3(0, 1, 0), angular_disp.z);
        
        /*
        float swing_acc = GetAngularAcc(
            wind_coff,
            swing_damping_coff,
            swing_stiffness,
            mass,
            wind_force,
            p2,
            swing_rotating_dir,
            float3(0, 0, 1),
            angular_velocity.z,
            angular_disp.z,
            wind_z_force
        );
        */
       
        
        float3 rotational_axis = float3(0, 0, 1);
        

        float swing_acc = GetSingleRodTorque(
            swing_damping_coff,
            swing_stiffness,
            wind_coff * wind, 
            p1,
            rotational_axis,
            angular_velocity.z,
            angular_disp.z
        ) + GetSecondRodTorque(
            swing_damping_coff,
            swing_stiffness,
            swing_stiffness * 0.8,
            angular_disp.z,
            angular_disp.w,
            angular_velocity.z,
            angular_velocity.w,
            p1,
            p2,
            wind_coff * wind,
            rotational_axis,
            swing_rotating_dir
        ) / GetMomentOfInertia(mass, p1, p2);
        
        /*
        float swing_acc = GetSingleRodTorque(
            swing_damping_coff,
            swing_stiffness,
            wind_coff * wind,
            p1,
            rotational_axis,
            angular_velocity.z,
            angular_disp.z
        ) / GetMomentOfInertia(mass, p1, p2);
        */
        
        wind_force = wind;
        float total_p1_bend = ShiftToPIAtMaxAngle(PI_VALUE / 2.0 + angular_disp.y);

        if (total_p1_bend < p1_threshold_low || total_p1_bend > p1_threshold_high)
        {
            //wind_force = float3(0, 0, 0);
        }

        float3 rotating_dir = cross(swing_rotating_dir, p1);
        
        float p1_length = length(p1);
        float p1p2_length = length(p1p2);
        
        float legnth_sum = p1_length + p1p2_length;
        float p1_mass = mass * p1_length / legnth_sum;
        float p1p2_mass = mass * p1p2_length / legnth_sum;
        
        
        float p1_bending_acc = GetSingleRodTorque(
            swing_damping_coff,
            swing_stiffness,
            wind_coff * wind, 
            p1,
            swing_rotating_dir,
            angular_velocity.y,
            angular_disp.y
        ) + GetSecondRodTorque(
            swing_damping_coff,
            swing_stiffness,
            swing_stiffness * 0.8,
            angular_disp.y,
            angular_disp.w,
            angular_velocity.y,
            angular_velocity.w,
            p1,
            p2,
            wind_coff * wind,
            swing_rotating_dir,
            swing_rotating_dir
        ) / GetMomentOfInertia(mass, p1, p2);
       
        
        /*
        float p1_bending_acc = GetSingleRodTorque(
            swing_damping_coff,
            swing_stiffness,
            wind_coff * wind,
            p1,
            swing_rotating_dir,
            angular_velocity.y,
            angular_disp.y
        ) / GetMomentOfInertia(mass, p1, p2);
        */
        
        wind_force = wind;
        float total_p1p2_bend = ShiftToPIAtMaxAngle(p1p2_static_bending + angular_disp.w);
        
        if (abs(total_p1p2_bend) < p1p2_threshold)
        {
            //wind_force = float3(0, 0, 0);
        }
        

        rotating_dir = cross(swing_rotating_dir, p1p2);
        
        float p1p2_bending_acc = GetSingleRodTorque(
            damping_coff,
            stiffness * 0.2,
            wind_coff * wind_force,
            p1p2,
            swing_rotating_dir,
            angular_velocity.w,
            angular_disp.w
        ) / (p1p2_mass * p1p2_length * p1p2_length / 3.0);
        
        wind_z_force = swing_rotating_dir * 20 * p1p2_bending_acc;
        
        
        float4 velocity_delta = float4(0, p1_bending_acc, swing_acc, p1p2_bending_acc) * time_delta;
        
        //float4 velocity_delta = float4(0, 0.5, 0.5, 0) * time_delta;
        
        angular_velocity += velocity_delta;

        angular_disp += angular_velocity * time_delta;
        //angular_disp = fmod(angular_disp, 8 * PI_VALUE);
        
    }
    
    void GrassUpdate(
        float damping_coff,
        float stiffness,
        float p2_stiffness,
        float mass,
        float time_delta,
        float3 wind,
        float2 p1_xz,
        float2 p2_xz,
        inout float4 angular_velocity,
        inout float4 angular_disp,
        out float3 wind_z_force
    )
    {
        float swing_threshold = PI_VALUE * 0.98;
        float p1_threshold_low = PI_VALUE * 0.02;
        float p1_threshold_high = PI_VALUE * 1.98;
        float p1p2_threshold = PI_VALUE * 0.02;
  
        
        
        if (p1_xz.x < 0)
        {
            p1_xz.x = 0.01;
        }
        float p1_static_bending = atan(p1_xz.y / p1_xz.x);
        
        float2 p1p2_xz = p2_xz - p1_xz;
        float p1p2_static_bending = acos(dot(-p1_xz, p1p2_xz) / (length(p1_xz) * length(p1p2_xz)));

        float3 p1 = float3(0, 0, 0);
        float3 p2 = float3(0, 0, 0);
        GetBezierPoints(p1_xz, p2_xz, angular_disp, p1, p2);
        float3 p1p2 = p2 - p1;
        
        float r1_disp_angle = length(angular_disp.xyz);
        float3 r2_rotational_axis = RotateVectorByQuaternion(float3(0, 1, 0), QuaternionFromRotationalVector(angular_disp.xyz));
  
    
        
        float3 p1_acc = GetPivotRodTorque(
            damping_coff,
            stiffness,
            wind,
            p1,
            angular_velocity.xyz,
            angular_disp.xyz
        ) + GetDistantRodTorque(
            damping_coff,
            wind,
            p2_stiffness,
            angular_velocity.w,
            angular_disp.w,
            r2_rotational_axis,
            stiffness,
            angular_velocity.xyz,
            angular_disp.xyz,
            p1,
            p2
        ) / GetMomentOfInertia(mass, p1, p2);
    
        /*
        float3 p1_acc = GetPivotRodTorque(
            damping_coff,
            stiffness,
            wind_coff * wind,
            p1,
            angular_velocity.xyz,
            angular_disp.xyz
        ) / GetMomentOfInertia(mass, p1, p2);
        */
        float p1_length = length(p1);
        float p1p2_length = length(p1p2);
        
        float legnth_sum = p1_length + p1p2_length;
        float p1_mass = mass * p1_length / legnth_sum;
        float p1p2_mass = mass * p1p2_length / legnth_sum;
        
        
        float3 p1p2_bending_acc = GetPivotRodTorque(
            damping_coff,
            p2_stiffness,
            wind,
            p1p2,
            angular_velocity.w * r2_rotational_axis,
            angular_disp.w * r2_rotational_axis
        ) / (p1p2_mass * p1p2_length * p1p2_length / 3.0);
        
        
        float4 velocity_delta = float4(p1_acc, dot(r2_rotational_axis, p1p2_bending_acc)) * time_delta;
        angular_velocity += velocity_delta;

        angular_disp += angular_velocity * time_delta;
        
    }
};
  