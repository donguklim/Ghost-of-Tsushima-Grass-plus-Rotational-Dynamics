#ifndef __ROTATIONAL_DYNAMIC_FASETER_GRASS_MOTION_HLSL__
#define __ROTATIONAL_DYNAMIC_FASETER_GRASS_MOTION_HLSL__

#include "GrassMotionShader.ush"


float3 GetPaybackPivotBarTorque(
    float dampingCoff,
    float stiffness,
    float3 windForce,
    float3 bar,
    float3 angularVelocity,
    float3 angularDisp
)
{   
    return length(bar) * (cross(bar, windForce) / 2.0f - dampingCoff / 3.0f * cross(bar, cross(angularVelocity, bar)))
        - stiffness * angularDisp;
}


float3 GetSeizedBar2TorqueOnP0(
    float dampingCoeff,
    float3 windForce,
    float3 bar1AngularVelocity,
    float3 bar1,
    float bar2AngularVelocity,
    float3 bar2RotationalAxis,
    float3 bar2
)
{
    float bar2Length = length(bar2);
    float3 axisCrossBar2 = cross(bar2RotationalAxis, bar2);
        
    float3 l0ForceTerm =  windForce
        - dampingCoeff * cross(bar1AngularVelocity, bar1);
    float3 l1ForceTerm = -dampingCoeff * (bar2AngularVelocity * axisCrossBar2 + cross(bar1AngularVelocity, bar2));
    float3 l0Term = cross(bar1, l0ForceTerm);
    float3 l1Term = cross(bar2, l0ForceTerm) + cross(bar1, l1ForceTerm);
    float3 l2Term = cross(bar2, l1ForceTerm);
        
    return bar2Length * (l0Term + l1Term / 2.0f + l2Term / 3.0f);

}


float GetMomentOfInertia(float segmentDensity, float3 bar1, float3 p2)
{
    float3 bar2 = p2 - bar1;
    float bar2Length = length(bar2);
    float bar1Length = length(bar1);
    // bar2 center distance from pivot (0, 0, 0)
    float bar2CenterDistance = length(bar2 / 2 + bar1);
        
    float bar2Mass = segmentDensity * bar2Length;
    float bar1Mass = segmentDensity * bar1Length;
    
    // Moment of Inertia caused by bar 2
    // = Moment of Inertia of bar2 at its center of mass + (bar 2 center of mass distance from the pivot)^2
    //
    // Moment of Inertia of bar 2 at its center of mass = bar2_mass * bar2_length * bar2_length / 12.0
    float bar2MomentOfIntertia = bar2Mass * (bar2Length * bar2Length / 12.0 + bar2CenterDistance * bar2CenterDistance);
        
    float bar1MomentOfIntertia = (bar1Mass) / 3.0 * bar1Length * bar1Length;
        
    return bar1MomentOfIntertia + bar2MomentOfIntertia;
    
}


void GrassUpdatePayBack(
    float dampingCoff,
    in float massDensity,
    float stiffness,
    float p1Stiffness,
    in float timeDelta,
    in float3 wind,
    in FQuat initialOrientation,
    in float3 scale,
    in float2 p1Position,
    float3 groundNormal,
    inout float4 angularVelocity,
    inout float4 angularDisp
)
{
    float2 p1p2XZ = float2(1, 0) - p1Position;
    float bar2StaticAngle = Get2DAngle(p1p2XZ) - Get2DAngle(p1Position);
    float segmentMassDensity = scale.y * massDensity;
    segmentMassDensity = segmentMassDensity < 0.01f ? 1.0f : segmentMassDensity;
    
    wind *= scale.y;
    dampingCoff *= scale.y;
    
    float3 staticP1 = float3(p1Position.x, 0, p1Position.y) * scale;
    float3 staticP2 = float3(1, 0, 0) * scale;
    staticP1 = QuatRotateVector(initialOrientation, staticP1);
    staticP2 = QuatRotateVector(initialOrientation, staticP2);
    float3 bar2RotationalAxis = QuatRotateVector(initialOrientation, float3(0, 1, 0));

    float3 p1 = float3(0, 0, 0);
    float3 p2 = float3(0, 0, 0);
    

    GetRotatedBezierPoints(staticP1, staticP2, bar2RotationalAxis, angularDisp, p1, p2, bar2RotationalAxis);
    
    float3 bar1Dir = normalize(p1);
             
    // p0 angular acceleration that would occur when p1 pivot is seized(when p0p1 and p1p2 dd not bend at p1 and are stationary)
    
    float momentOfIntertia = GetMomentOfInertia(segmentMassDensity, p1, p2);
    
    float3 bar2 = p2 - p1;
    // P0 moment from restoration force, wind force and air friction force
    float3 p0Moment = (
        GetPaybackPivotBarTorque(
            dampingCoff,
            stiffness,
            wind,
            p1,
            angularVelocity.xyz,
            angularDisp.xyz
        ) + GetSeizedBar2TorqueOnP0(
            dampingCoff,
            wind,
            angularVelocity.xyz,
            p1,
            angularVelocity.w,
            bar2RotationalAxis,
            bar2
        )
    );


    float bar1Length = length(p1);
    float bar2Length = length(bar2);
        
    float bar1Mass = segmentMassDensity * bar1Length;
    float bar2Mass = segmentMassDensity * bar2Length;
        
    
    // (angular velocity) x (angular velocity x p1) is the centirpetal acceleration made at p1(not angular accleration, just plain acceleration)
    float3 p1CentripetalInertiaForce = -bar2Mass * (cross(angularVelocity.xyz, cross(angularVelocity.xyz, p1)));

    // moment from the intertia force due to centeripetal force == cross(0.5 * bar2, p1CentripetalInertiaForce) 
    // and moment from wind force, air friction force and restoration moment.
    float3 p1RawMoment = cross(0.5 * bar2, p1CentripetalInertiaForce) + GetPaybackPivotBarTorque(
        dampingCoff,
        p1Stiffness,
        wind,
        bar2,
        angularVelocity.w * bar2RotationalAxis,
        angularDisp.w * bar2RotationalAxis
    );
        
    // p1's pivot is limited to make only rotation about `bar2RotationalAxis`, so the true moment is calcualted by projection.
    float p1Moment = dot(bar2RotationalAxis, p1RawMoment);
    
    float torqueTerm = 0.5 * bar2Mass * bar1Length * bar1Length / momentOfIntertia;
    float p0TorqueDotAxis = dot(p0Moment, bar2RotationalAxis) / (1.0f + torqueTerm);
    
    float3 p0Torque = p0Moment - torqueTerm * p0TorqueDotAxis * bar2RotationalAxis;
    
    float3 p0Acc = p0Torque / momentOfIntertia;
        
    // The total torque to P1 required to make P1 seized is -p1BendingTorque.
    // Now payback the torque to P1
    
    float p1Torque = p1Moment - 0.5 * bar2Mass * p0TorqueDotAxis / momentOfIntertia * dot(p1, bar2);
    
    float p1Acc = p1Torque * 3.0f / (bar2Mass * bar2Length * bar2Length);
    
           
    float4 velocityDelta = float4(p0Acc, p1Acc) * timeDelta;
    
    angularVelocity += velocityDelta;
        
    float4 dispDelta = angularVelocity * timeDelta;
    

    // Limit P1 angle displacement so that bar1 does not touch bar2.
    float maxP1AngleDelta = PI_VALUE - P1_ANGLE_THRESHOLD - (bar2StaticAngle + angularDisp.w);
    float minP1AngleDelta = P1_ANGLE_THRESHOLD - PI_VALUE - (bar2StaticAngle + angularDisp.w);
    
    maxP1AngleDelta = maxP1AngleDelta < 0 ? 0 : maxP1AngleDelta;
    minP1AngleDelta = minP1AngleDelta > 0 ? 0 : minP1AngleDelta;
    
    
    if (length(angularDisp.xyz) < 2 * PI_VALUE)
    {
        limitAngleDispScale(angularDisp.xyz, dispDelta.xyz, angularVelocity.xyz);
    }
    else
    {
        getAngleDispScaleDecreasingDelta(angularDisp.xyz, dispDelta.xyz, angularVelocity.xyz);
    }

    if (dispDelta.w < minP1AngleDelta || maxP1AngleDelta < dispDelta.w)
    {
        angularVelocity.w = 0;
        dispDelta.w = clamp(dispDelta.w, minP1AngleDelta, maxP1AngleDelta);
    }
    
    if (dot(bar1Dir, groundNormal) < BAR_DOT_GROUND_THRESHOLD)
    {
        getMaximumUpwardDelta(bar1Dir, groundNormal, dispDelta.xyz, angularVelocity.xyz);
    }
    else
    {
        applyGroundCollision(bar1Dir, groundNormal, dispDelta.xyz, angularVelocity.xyz);
    }
    
    angularDisp += dispDelta;
        
}

#endif //  __ROTATIONAL_DYNAMIC_FASETER_GRASS_MOTION_HLSL__
