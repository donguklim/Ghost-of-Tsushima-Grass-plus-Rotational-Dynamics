#ifndef __ROTATIONAL_DYNAMIC_GRASS_WIND_NOISE_HLSL__
#define __ROTATIONAL_DYNAMIC_GRASS_WIND_NOISE_HLSL__


#include "Common/Constants.ush"

/*
    Claude AI made the gradient GradientNoiseHash and GradientNoise functions, 
    and I just fixed a sintax error and changed the noise function range from [-1, 1] to [-PI, PI]
*/


float2 GradientNoiseHash(float seed, float2 p)
{
    p = float2(dot(p, float2(127.1, 311.7)),
                  dot(p, float2(269.5, 183.3)));
    
    p += float2(seed * 43758.5453123, seed * 23421.631);
    
    return -1.0 + 2.0 * frac(sin(p) * 43758.5453123);
}

float GradientNoise(in float seed, in float2 uv)
{
    // Grid cell coordinates
    float2 i = floor(uv);
    float2 f = frac(uv);
    
    // Quintic interpolation curve for smoother gradients
    float2 u = f * f * f * (f * (f * 6.0 - 15.0) + 10.0);
    
    // Hash function for corner gradients

    
    // Get gradient vectors at grid corners
    float2 g00 = GradientNoiseHash(seed, i + float2(0.0, 0.0));
    float2 g10 = GradientNoiseHash(seed, i + float2(1.0, 0.0));
    float2 g01 = GradientNoiseHash(seed, i + float2(0.0, 1.0));
    float2 g11 = GradientNoiseHash(seed, i + float2(1.0, 1.0));
    
    // Calculate dot products between gradients and distance vectors
    float n00 = dot(g00, f - float2(0.0, 0.0));
    float n10 = dot(g10, f - float2(1.0, 0.0));
    float n01 = dot(g01, f - float2(0.0, 1.0));
    float n11 = dot(g11, f - float2(1.0, 1.0));
    
    // Bilinear interpolation with the quintic curve
    float nx0 = lerp(n00, n10, u.x);
    float nx1 = lerp(n01, n11, u.x);
    float n = lerp(nx0, nx1, u.y);
    
    // Return value in range [-1, 1]
    return n;
}

float LeveledGradientNoise(float seed, float2 UV, float Scale, int NumLevels, float OutputMin, float OutputMax)
{
    UV *= Scale;
    float LevelScale = 2.0;
    float Out = 0.0f;
    float InvLevelScale = 1.0f / LevelScale;
    float OutScale = 1.0;
    float OutScaleSum = 0.0f;
	
    for (uint i = 0; i <NumLevels; ++i)
    {
        Out += abs(GradientNoise(seed, UV)) * OutScale;
        
        UV *= LevelScale;
        OutScaleSum += OutScale;
        OutScale *= InvLevelScale;
    }

    //Out /= OutScaleSum;
    return lerp(OutputMin, OutputMax, Out);
}

#endif //  __ROTATIONAL_DYNAMIC_GRASS_WIND_NOISE_HLSL__
