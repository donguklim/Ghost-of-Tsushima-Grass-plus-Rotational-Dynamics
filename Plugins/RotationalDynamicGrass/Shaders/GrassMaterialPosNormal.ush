#ifndef __ROTATIONAL_DYNAMIC_GRASS_POS_NORMAL_HLSL__
#define __ROTATIONAL_DYNAMIC_GRASS_POS_NORMAL_HLSL__

#include "Common/BezierCurve.ush"

#define GRASS_NORMAL_LENGTH_THRESHOLD 0.05
#define MIN_STIFFNESS_RATIO 0.1



// This function should run on the vertex shader. Running this function on pixel shader would not give significantly more accurate result
// Use vertext interpolator node between the custom nodes that runs this function and bellow GetGrassNormal function
float3 GetRotatedCurvePointTangentSide(
    float2 p1Position,
    float2 stiffnessRatios,
    float viewDependentTiltScale,
    in float2 uv,
    in float4 angularDisp,
    in float3 viewingDir,
    out float3 outputP1,
    out float3 outputP2,
    out float3 unitTangent,
    out float3 sideDir
)
{
    float t = uv.x;
    float s = 1 - t;
    float s2 = s * s;
    float t2 = t * t;

    float4 p0 = float4(0, 0, 0, 1);
    float4 p1 = float4(p1Position.x, 0, p1Position.y, stiffnessRatios.x);
    float4 p2 = float4(1, 0, 0, stiffnessRatios.y);
    
    // initialize points at static positions
    p1.w = p1.w > 1 ? 1 : p1.w;
    p1.w = p1.w < MIN_STIFFNESS_RATIO ? 1 : p1.w;
    p2.w = p1.w < p2.w ? p1.w : p2.w;
    p2.w = p2.w < MIN_STIFFNESS_RATIO ? p1.w : p2.w;

    
    GetRotatedBezierPoints(p1.xyz, p2.xyz, float3(0, 1, 0), angularDisp, outputP1, outputP2);
    
    p1.xyz = outputP1;
    p2.xyz = outputP2;
        
    float4 curvePoint = s2 * p0 + 2 * s * t * p1 + t2 * p2;
    float3 curveTangent = 2 * s * (p1.xyz) + 2 * t * (p2.xyz - p1.xyz);
        
    /* tilt xy_plane norm abount the curve tangent */
    float vec_length = length(curveTangent);
    unitTangent = (vec_length > GRASS_NORMAL_LENGTH_THRESHOLD) ? (curveTangent / vec_length) : curveTangent;
        
    float3 rotationalVector = angularDisp.xyz * (1.0 - curvePoint.w + p2.w * t);
    float rotAngle = length(rotationalVector);
    if (rotAngle > ANGLE_THRESHOLD)
    {
        sideDir = QuatRotateVector(QuatFromAxisAngle(rotationalVector / rotAngle, rotAngle), float3(0, 1, 0));
    }
    else
    {
        sideDir = float3(0, 1, 0);
    }

    if (viewDependentTiltScale != 0.0)
    {
        float tiltAngle = dot(sideDir, viewingDir) * viewDependentTiltScale;
        sideDir = QuatRotateVector(
            QuatFromAxisAngle(unitTangent, tiltAngle),
            sideDir
        );
    }
 
    return curvePoint.xyz;
}


// This function should run on the vertex shader. Running this function on pixel shader would not give significantly more accurate result
// Use vertext interpolator node between the custom nodes that runs this function and bellow GetGrassNormal function
// Only rotation on P1 and twsit from P0 is applied.
// Rotation from P0 is assumed to be already done by mesh orientation update in Niagara
float3 GetRotatedCurvePointTangentSideWithoutP0Rotation(
    in float4 bezierPointsData,
    in float viewDependentTiltScale,
    in float2 uv,
    in float4 angularDisp,
    in float3 viewingDir,
    out float3 outputP2,
    out float3 unitTangent,
    out float3 sideDir
)
{
    float t = uv.x;
    float s = 1 - t;
    float s2 = s * s;
    float t2 = t * t;
    
    float4 p0 = float4(0, 0, 0, 1);
    float4 p1 = float4(bezierPointsData.x, 0, bezierPointsData.y, bezierPointsData.z);
    float4 p2 = float4(1, 0, 0, bezierPointsData.w);
    
    // initialize points at static positions
    p1.w = p1.w > 1 ? 1 : p1.w;
    p1.w = p1.w < MIN_STIFFNESS_RATIO ? 1 : p1.w;
    p2.w = p1.w < p2.w ? p1.w : p2.w;
    p2.w = p2.w < MIN_STIFFNESS_RATIO ? p1.w : p2.w;
    
    if (abs(angularDisp.w) < ANGLE_THRESHOLD)
    {
        outputP2 = p2.xyz;

    }
    else
    {
        outputP2 = p1.xyz + QuatRotateVector(
            QuatFromAxisAngle(float3(0, 1, 0), angularDisp.w),
            p2.xyz - p1.xyz
        );
        p2.xyz = outputP2;
    }
    
        
    float4 curvePoint = s2 * p0 + 2 * s * t * p1 + t2 * p2;
    float3 curveTangent = 2 * s * (p1.xyz) + 2 * t * (p2.xyz - p1.xyz);
        
    /* tilt xy_plane norm abount the curve tangent */
    float tangentLength = length(curveTangent);
    unitTangent = (tangentLength > GRASS_NORMAL_LENGTH_THRESHOLD) ? (curveTangent / tangentLength) : curveTangent;
        
     // make twist from p0 rotation
    // the side dir at p2 is (0, 1 ,0) in the mesh space
    // the side dier at p0 is the inverse rotation of the angualr_disp.xyz
    float3 rotationalVector = -angularDisp.xyz * (1.0 - curvePoint.w + p2.w * s);
    float rotAngle = length(rotationalVector);
    if (rotAngle < ANGLE_THRESHOLD)
    {
        sideDir = float3(0, 1, 0);
    }
    else
    {
        sideDir = QuatRotateVector(
            QuatFromAxisAngle(rotationalVector / rotAngle, rotAngle),
            float3(0, 1, 0)
        );
    }
        
    if (viewDependentTiltScale != 0.0)
    {
        float tiltAngle = dot(sideDir, viewingDir) * viewDependentTiltScale * t;
        
        if (tiltAngle > ANGLE_THRESHOLD && tangentLength > GRASS_NORMAL_LENGTH_THRESHOLD)
        {
            sideDir = QuatRotateVector(
                QuatFromAxisAngle(unitTangent, tiltAngle),
                sideDir
            );
        }
    }
    
    return curvePoint.xyz;
}


// This function should be executed on the pixel shader for more detailed result
// unit_tangent and side_dr are supposed to be the output parameters of GetRotatedCurvePointTangentSide function.
float3 GetGrassNormal(
    in float2 uv,
    in float3 unit_tangent,
    in float3 side_dir,
    float mid_smooth,
    float rim_pos,
    float rim_smooth,
    float y_strength
)
{
    float g_axis_val = uv.y - 0.5;
    float3 curve_norm = cross(unit_tangent, side_dir);
    
    float smoothing_value = saturate((g_axis_val + mid_smooth) / (mid_smooth * 2));
    float middle_value = smoothing_value * smoothing_value * (3.0 - 2.0 * smoothing_value);

    float rim_smoothing_value = saturate((abs(g_axis_val) - rim_pos + rim_smooth) / (rim_smooth * 2));
    float rim_value = rim_smoothing_value * rim_smoothing_value * (3.0 - 2.0 * rim_smoothing_value);

    float linear_value = (1.0 - middle_value) * rim_value + middle_value * (1.0 - rim_value);

    float y = (1 - 2 * linear_value) * y_strength;
    float3 normal_vector = curve_norm + y * side_dir;
    float vec_length = length(normal_vector);

    return (vec_length > GRASS_NORMAL_LENGTH_THRESHOLD) ? (normal_vector / vec_length) : normal_vector;
    
}


// This function is for vetext shader, but you would not really need to use vertex interploator node,
// because you would connet output of this function to the material position offset result, which is ran on vertex shader.
// p1, p2, curve_point, unit_tangent and side_dr are supposed to be the output parameters of GetRotatedCurvePointTangentSide function.
float3 GetGrassPosOffset(
    in float2 uv, 
    in float3 p1, 
    in float3 p2,
    in float3 curvePoint,
    in float3 sideDir,
    in float opacity,
    float baseSquareMeshSize, 
    float width, 
    float base
)
{    
    float t = uv.x;
    float s = 1 - t;
    float g_axis_val = uv.y - 0.5;
    
    float curveLength = GetBezierCurveLength(p1, p2);
    float barLength = length(p1) + length(p2 - p1);
    //float curveLength = 1.0f;
    
    /* get position offset */
    // scale the curve and subtract the x, y value of the original rectangle rectangle mesh 
        
    return baseSquareMeshSize * (curvePoint / curveLength * barLength * opacity + g_axis_val * s * (t + base) * width * sideDir * opacity - float3(t, g_axis_val, 0));
}

#endif // __ROTATIONAL_DYNAMIC_GRASS_POS_NORMAL_HLSL__
