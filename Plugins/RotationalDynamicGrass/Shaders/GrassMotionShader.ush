#ifndef __ROTATIONAL_DYNAMIC_GRASS_MOTION_HLSL__
#define __ROTATIONAL_DYNAMIC_GRASS_MOTION_HLSL__

#include "Common/Constants.ush"
#include "Common/BezierCurve.ush"
#include "Common/SpatialVector.ush"


#define COLLISION_COEFFICENT_TRHESHOLD 0.01
#define WIND_MAGNITUDE_THRESHOLD 0.01


void applyCollision(in float3 barDir, in float3 normal, in float threshold, inout float3 angularDispDelta, inout float3 angularVelocity)
{
    float deltaAngle = length(angularDispDelta);
    if (deltaAngle < ANGLE_THRESHOLD)
    {
        return;
    }
        
    float3 axis = angularDispDelta / deltaAngle;
    float3 axisXBar = cross(axis, barDir);
        
    float aVal = dot(axisXBar, normal);
    float bVal = -dot(cross(axis, axisXBar), normal);
    float cVal = dot(barDir, normal) - bVal - threshold;
    
/*
    dot(ground_norm, new bar direction)
        = a * sin(angle delta) + b * cos(angle delta) - b + dot(current bar direction, normal)
    
    dot(ground_norm, new bar direction) - threshold  =  a * sin(x) + b * cos(x) + c,
    where c = dot(current bar direction, normal) - b - threshold
    
    f(x) = a * sin(x) + b * cos(x) + c
      
    we want to increase x from 0 to the point where f(x) is not positive anymore.
    
    df/dx(x) = a * cos(x) - b * sin(x)
    the critical values of x where df/dx(x) = 0 is 
        
        atan(a/b)
    
    two critical values exist since tan(x) == tan(x + pi)
    
    f maximum is c + a^2 + b^2
    f minimum is c - (a^2 + b^2)
    
*/
    // f(0) = c + a * sin(0) + b * cos(0) = c + b
    // already has collided at x = 0
    if (cVal + bVal < 0.0f)
    {
        angularVelocity = float3(0, 0, 0);
        angularDispDelta = float3(0, 0, 0);
        return;
    }
    
    float absA = abs(aVal);
    float absB = abs(bVal);
    float absC = abs(cVal);
    
    // decreasing angle does not have any effect on ground norm dot value
    if (absA < COLLISION_COEFFICENT_TRHESHOLD && absB < COLLISION_COEFFICENT_TRHESHOLD)
    {
        return;
    }
    
    // f(x) = b * cos(x)
    if (absC < COLLISION_COEFFICENT_TRHESHOLD && absA < COLLISION_COEFFICENT_TRHESHOLD)
    {
        float angleMax = bVal < 0.0f ? 0.0f : 0.5 * PI_VALUE;
        
        if (deltaAngle <= angleMax)
        {
            return;
        }
        angularVelocity = float3(0, 0, 0);
        angularDispDelta = axis * angleMax;
        return;
    }
    
    // f(x) = a * sin(x)
    if (absC < COLLISION_COEFFICENT_TRHESHOLD && absB < COLLISION_COEFFICENT_TRHESHOLD)
    {
        float angleMax = aVal < 0.0f ? 0.0f : PI_VALUE;
        
        if (deltaAngle <= angleMax)
        {
            return;
        }
        angularVelocity = float3(0, 0, 0);
        angularDispDelta = axis * angleMax;
        return;
    }
    
    
    // f(x) = a * sin(x) + b * cos(x)
    if (absC < COLLISION_COEFFICENT_TRHESHOLD)
    {
        float zeroX = atan(-bVal / aVal);
        zeroX = zeroX < 0.0f ? zeroX + PI_VALUE : zeroX;
        
        if (deltaAngle <= zeroX)
        {
            return;
        }
        
        angularVelocity = float3(0, 0, 0);
        angularDispDelta = zeroX * axis;
        return;
    }
    
    // transform f(x) to f(x) = a * sin(x) + b * cos(x) + 1
    // scale does not matter since we want to find value of x where f(x) begins to become negaitve
    
    
    aVal /= cVal;
    bVal /= cVal;
    
    absA = abs(aVal);
    absB = abs(bVal);
    
     // f(x) = 1 + b * cos(x), 
    if (absA < COLLISION_COEFFICENT_TRHESHOLD)
    {

        // no colliding at any angle
        if (absB < 1.0f)
        {
            return;
        }
        
        float allowedAngleMax = acos(-1.0 / bVal);
        if (deltaAngle <= allowedAngleMax)
        {
            return;
        }
        
        angularVelocity = float3(0, 0, 0);
        angularDispDelta = allowedAngleMax * axis;
        return;
    }
    
    //  f(x) = 1 + a * sin(x)
    if (absB < COLLISION_COEFFICENT_TRHESHOLD)
    {
        if (absA < 1.0f)
        {
            return;
        }
        
        float allowedAngleMax = asin(-1.0f / aVal);
        
        allowedAngleMax = allowedAngleMax < 0.0f ? PI_VALUE - allowedAngleMax : allowedAngleMax;
        
        if (deltaAngle < allowedAngleMax)
        {
            return;
        }
        
        angularVelocity = float3(0, 0, 0);
        angularDispDelta = allowedAngleMax * axis;
        return;
    }
    
    float maginitude = sqrt(aVal * aVal + bVal * bVal);
    
    // no colliding at any angle
    if (maginitude < 1.0f)
    {
        return;
    }
    
    /*
        Given a * sin(x) + b * cos(x) = 1
        using trigonometric identity sin(i + j) = sin(i)cos(j) = cos(i)sin(j)
        R * sin(x + z) = 1,  where tan(z) = b/a and R = sqrt(a^2 + b^2)
        x = asin(1/R) + atan(b/a)
    */
    
    float asinVal = asin(1.0 / maginitude);
    float atanVal = atan(bVal / aVal);
    
    /*
        sin(t) = sin(pi - t)
        tan(a) = tan(a + pi)
        need to compare all cases
    
        a + t
        a  + pi - t
        a + pi + t
        a + pi + pi - t = a - t
    */
    float angleSum = asinVal + atanVal;
    float angleSumPlusPi = angleSum + PI_VALUE;
    float angleDiff = atanVal - asinVal;
    float angleDiffPlusPi = angleDiff + PI_VALUE;
    
    angleSum = angleSum < 0.0f ? angleSum + 2 * PI_VALUE : angleSum;
    angleDiff = angleDiff < 0.0f ? angleDiff + 2 * PI_VALUE : angleDiff;
    angleSumPlusPi = angleSumPlusPi < 0.0f ? angleSumPlusPi + 2 * PI_VALUE : angleSumPlusPi;
    angleDiffPlusPi = angleDiffPlusPi < 0.0f ? angleDiffPlusPi + 2 * PI_VALUE : angleDiffPlusPi;
    
    float zeroX = min(min(angleDiff, angleSum), min(angleSumPlusPi, angleDiffPlusPi));
    
    if (deltaAngle <= zeroX)
    {
        return;
    }
    
    angularVelocity = float3(0, 0, 0);
    angularDispDelta = zeroX * axis;

}

void getMaximumNonCollidingDelta(float3 barDir, float3 normal, inout float3 angularDispDelta, inout float3 angularVelocity)
{
    float deltaAngle = length(angularDispDelta);
    if (deltaAngle < ANGLE_THRESHOLD)
    {
        return;
    }
        
    float3 axis = angularDispDelta / deltaAngle;
    float3 axisXBar = cross(axis, barDir);
        
    float aVal = dot(axisXBar, normal);
    float bVal = dot(cross(axis, axisXBar), normal);
    
    float absA = abs(aVal);
    float absB = abs(bVal);
    
/*
    dot(ground_norm, new bar direction)
        = a * sin(angle delta) - b * cos(angle delta) + b + dot(current bar direction, normal)
    
    f(x) =  a * sin(x) - b * cos(x) + c
    df/dx(x) = a * cos(x) + b * sin(x)
    
    we want to increase x from 0 to the point where df/dx is not positive anymore.
    
    if df/dx(0) < 0
    return zero vector
    Else find x for df/dx(x) == 0
    x = atan(-a/b)
 */
    
    // angular displacement delta does not increase nor decrease the dot value.
    if (absA < COLLISION_COEFFICENT_TRHESHOLD && absB < COLLISION_COEFFICENT_TRHESHOLD)
    {
        return;
    }
    
    //  df/dx(0) = a
    // already negative derievative
    if (aVal < 0.0f)
    {
        angularVelocity = float3(0, 0, 0);
        angularDispDelta = float3(0, 0, 0);
        return;
    }
            
    // df/dx(0) = b * sin(x)
    if (absA < COLLISION_COEFFICENT_TRHESHOLD)
    {
        if (bVal < 0.0f)
        {
            angularVelocity = float3(0, 0, 0);
            angularDispDelta = float3(0, 0, 0);
            return;
        }
        
        if (deltaAngle < PI_VALUE)
        {
            return;
        }
        
        angularVelocity = float3(0, 0, 0);
        angularDispDelta = axis * PI_VALUE;
        return;
    }
    
    // df/dx(x) = a * cos(x)
    // a is positive by above df/dx(0) check
    if (absB < COLLISION_COEFFICENT_TRHESHOLD)
    {   
        if (deltaAngle < 0.5 * PI_VALUE)
        {
            return;
        }
        
        angularVelocity = float3(0, 0, 0);
        angularDispDelta = axis * 0.5 * PI_VALUE;
        return;
    }
        
    float xVal = atan(-aVal / bVal);
    xVal = xVal < 0.0f ? xVal + PI_VALUE : xVal;
    
    if (xVal < deltaAngle)
    {
        angularVelocity = float3(0, 0, 0);
        angularDispDelta = xVal * axis;
    }

}


/*
   Scale down angulr displacement delta so that
    |current angular displacement + angular displacement delta| < 2 PI
*/
void limitAngleDispScale(in float3 angularDisp, inout float3 angularDispDelta, inout float3 angularVelocity)
{
    
    float deltaAngle = length(angularDispDelta.xyz);
    if (deltaAngle < ANGLE_THRESHOLD)
    {
        return;
    }
    
    float leftMarginSquare = 4 * PI_VALUE * PI_VALUE - dot(angularDisp, angularDisp);
    // already exceeded the limit
    if (leftMarginSquare < 0.0f)
    {
        angularDispDelta = 0.0f;
        angularVelocity = 0.0f;
        return;
    }
        
    float3 axis = angularDispDelta.xyz / deltaAngle;
    
     /*
        let 
            disp = square of current angular displacement
    
            f(x) = (2 PI)^2 - |disp + x * axis|^2 
                 = -x^2 - 2 dot(axis, disp) * x + 4*PI^2 -  |disp|^2
    
        we want to increase x from 0 to the point where f(x) is no longer positive
    
        the x for f(x) == 0 can be solved by solving the quadratic equation.
   
    */
    
    float axisDotDisp = dot(axis, angularDisp); 
    float discriminant = -4 * leftMarginSquare - 4 * axisDotDisp * axisDotDisp;
       
    // magnitude of delta angle cannot make angular displacement to breach the threshold
    if (discriminant < 0.0f)
    {
        return;
    }
    
    float sqrtDiscriminant = sqrt(discriminant);
        
    float maxAngleCandidateMax = -axisDotDisp + sqrtDiscriminant / 2.0f;
    float maxAngleCandidateMin = -axisDotDisp - sqrtDiscriminant / 2.0f;
    
    // No positive delta angle can breach the limit
    if (maxAngleCandidateMax < 0.0f)
    {
        return;
    }
    
    // choose the minimum of the positive values
    float maxAngle = maxAngleCandidateMin < 0 ? maxAngleCandidateMax : maxAngleCandidateMin;
    if (deltaAngle < maxAngle)
    {
        return;
    }
    
    angularDispDelta = maxAngle * axis;
    angularVelocity = 0.0f;
}


void getAngleDispScaleDecreasingDelta(in float3 angularDisp, inout float3 angularDispDelta, inout float3 angularVelocity)
{
    
    float deltaAngle = length(angularDispDelta);
    if (deltaAngle < ANGLE_THRESHOLD)
    {
        return;
    }
        
    float3 axis = angularDispDelta / deltaAngle;
    
    
     /*
        let 
            disp = square of current angular displacement
    
            f(x) = (2 PI)^2 - |disp + x * axis|^2 
                 = -x^2 - 2 dot(axis, disp) * x + 4*PI^2 -  |disp|^2
    
        then, df/dx(x) = -2x - 2 dot(axis, disp)
    
        we want to increase x from 0 to the point where df/dx(x) is no longer positive.
    
    */
    
    float axisDotDisp = dot(axis, angularDisp);
    
    // df/dx is alreaydy negative at 0
    if (axisDotDisp > 0)
    {
        angularDispDelta = 0.0f;
        angularVelocity = 0.0f;
        return;
    }
    
    if (deltaAngle < -axisDotDisp)
    {
        return;
    }
    
    angularDispDelta = -axisDotDisp * axis;
    angularVelocity = 0.0f;
    
}


float3 GetPivotBarTorque(
    float dampingCoff,
    float3 windForce,
    float3 bar,
    float3 angularVelocity
)
{
    return length(bar) * (
            cross(bar, windForce) / 2.0f
        - dampingCoff / 3.0f * cross(bar, cross(angularVelocity, bar))
    );
}

float3 GetBar2Torque(
    float dampingCoeff,
    float3 windForce,
    float3 bar1AngularVelocity,
    float3 bar1,
    float3 bar2AngularVelocity,
    float3 bar2
)
{
    return GetPivotBarTorque(dampingCoeff, windForce, bar2,  bar2AngularVelocity)
        - dampingCoeff * length(bar2) * (cross(bar2, cross(bar1AngularVelocity, bar1)) / 2.0f + cross(bar2, cross(bar1AngularVelocity, bar2)) / 3.0f);

}
 

float Get2DAngle(float2 vec)
{
    float vecLength = length(vec);
    if (vecLength < ANGLE_THRESHOLD)
    {
        return 0.0f;
    }
    
    float2 normalizedVector = vec / vecLength;
    
    float angle = acos(normalizedVector.x);
 
    if (normalizedVector.y > 0)
    {
        angle = -angle;
    }
    
    return angle;
}

/*
Using articulated body algorithm from FeatherStone's book
*/


void applyPlayerCollision(
    in float3 bar1Dir,
    in float bar1Length,
    in float3 bar2RotationalAxis,
    in float3 landNormal,
    in float3 legsBottomCenter,
    in float legsCollisionRadius,
    out float threshold,
    out bool isColliding,
    out float3 collisionNormal,
    inout float3 angularDisp, 
    inout float3 angularVelocity
)
{
    float baseToCenterLength = length(legsBottomCenter);
    float3 rotationalAxis;
    float dispAngle = 0.0f;
    isColliding = false;
    threshold = 0.0f;
    collisionNormal = float3(0, 0, 1);
    
    
    if (baseToCenterLength - bar1Length > legsCollisionRadius)
    {
        return;
    }
    
    
    if (baseToCenterLength < 0.01)
    {
        isColliding = true;
        threshold = 1.0f;
        
        if (abs(dot(bar1Dir, landNormal)) < 0.98)
        {
            rotationalAxis = cross(landNormal, bar1Dir);
            rotationalAxis = rotationalAxis / length(rotationalAxis);
        }
        else
        {
            rotationalAxis = bar2RotationalAxis;
        }
        
        dispAngle = PI_VALUE / 2.0 - acos(dot(bar1Dir, landNormal));
        angularVelocity = 0;
        angularDisp += rotationalAxis * dispAngle;
        
        collisionNormal = QuatRotateVector(
             QuatFromAxisAngle(rotationalAxis, dispAngle),
             bar1Dir
        );
        
        return;
        
    }
    
    float baseToCenterLengthSquare = baseToCenterLength * baseToCenterLength;
    float radiusSquare = legsCollisionRadius * legsCollisionRadius;
    float bar1LengthSquare = bar1Length * bar1Length;
    
    if (baseToCenterLength < legsCollisionRadius)
    {
        threshold = 1.0 - 2.0f * (min(0.5, baseToCenterLength / legsCollisionRadius) - 0.5);
        
         angularVelocity = 0;
    }
    
    else if (baseToCenterLengthSquare <= radiusSquare + bar1Length * bar1Length)
    {
        threshold = -sqrt(baseToCenterLengthSquare - radiusSquare) / baseToCenterLength;
    }
    else
    {
        threshold = (baseToCenterLengthSquare + bar1LengthSquare - legsCollisionRadius * legsCollisionRadius) / (bar1Length * baseToCenterLength);
    }
    
        
    collisionNormal = -legsBottomCenter / baseToCenterLength;
    
    isColliding = dot(bar1Dir, collisionNormal) < threshold;
    
    if(!isColliding)
        return;
    
    
    rotationalAxis = cross(bar1Dir, collisionNormal);
    rotationalAxis = rotationalAxis / length(rotationalAxis);
        
    dispAngle = acos(dot(bar1Dir, collisionNormal));
    angularVelocity = 0;
    angularDisp += rotationalAxis * dispAngle;
        
    return;
    
}


void GrassUpdate(
    float dampingCoff,
    in float massDensity,
    float stiffness,
    float p1Stiffness,
    in float timeDelta,
    in float3 wind,
    in FQuat initialOrientation,
    in float3 scale,
    in float2 p1Position,
    float3 groundNormal,
    float3 legsBottomCenter,
    float legsCollisionRadius,
    inout float4 angularVelocity,
    inout float4 angularDisp
)
{
    
    float2 p1p2XZ = float2(1, 0) - p1Position;
    float bar1Staticangle = Get2DAngle(p1Position);
    float bar2StaticAngle = Get2DAngle(p1p2XZ) - Get2DAngle(p1Position);

    float segmentMassDensity = scale.y * massDensity;
    segmentMassDensity = segmentMassDensity < 0.01f ? 1.0f : segmentMassDensity;
    
    wind *= scale.y;
    dampingCoff *= scale.y;
    
    float3 staticP1 = float3(p1Position.x, 0, p1Position.y) * scale;
    float3 staticP2 = float3(1, 0, 0) * scale;
    staticP1 = QuatRotateVector(initialOrientation, staticP1);
    staticP2 = QuatRotateVector(initialOrientation, staticP2);
    float3 bar2RotationalAxis = QuatRotateVector(initialOrientation, float3(0, 1, 0));

    float3 p1 = float3(0, 0, 0);
    float3 p2 = float3(0, 0, 0);
    
    GetRotatedBezierPoints(staticP1, staticP2, bar2RotationalAxis, angularDisp, p1, p2, bar2RotationalAxis);
    
        
    float3 bar1Dir = normalize(p1);
    float3 bar2 = p2 - p1;
    float3 bar2Dir = normalize(bar2);
    
    float bar1Length = length(p1);
    float bar1LengthSquare = bar1Length * bar1Length;
    float bar2Length = length(bar2);
    float playerCollisionThheshold = 0.0f;
    bool isPlayerColliding = false;
    float3 playerCollisionNormal = 0;

    applyPlayerCollision(
        bar1Dir, 
        bar1Length, 
        bar2RotationalAxis, 
        groundNormal, 
        legsBottomCenter, 
        legsCollisionRadius, 
        playerCollisionThheshold, 
        isPlayerColliding, 
        playerCollisionNormal,
        angularDisp.xyz, 
        angularVelocity.xyz
    );
    
    if (isPlayerColliding)
    {
        GetRotatedBezierPoints(staticP1, staticP2, bar2RotationalAxis, angularDisp, p1, p2, bar2RotationalAxis);
        
        bar1Dir = normalize(p1);
        bar2 = p2 - p1;
        bar2Dir = normalize(bar2);
    }
        
    float bar1Mass = segmentMassDensity * bar1Length * scale.y;
    float bar2Mass = segmentMassDensity * bar2Length * scale.y;

    
    float bar1InertiaVal = bar1Mass * (bar1LengthSquare) / 3.0f;
    float3x3 bar1BaseInertiaTensor = float3x3(
        0, 0.0f, 0.0f,
        0.0f, bar1InertiaVal, 0.0f,
        0.0f, 0.0f, bar1InertiaVal
    );
    
    float bar2InertiaVal = bar2Mass * (bar2Length * bar2Length) / 3.0f;
    float3x3 bar2BaseInertiaTensor = float3x3(
            0, 0.0f, 0.0f,
            0.0f, bar2InertiaVal, 0.0f,
            0.0f, 0.0f, bar2InertiaVal
    );
    
    float p0DispAngle = length(angularDisp.xyz);
    FQuat p0DispReverseQuat = p0DispAngle < ANGLE_THRESHOLD ? FQuat(0, 0, 0, 1.0f) : QuatFromAxisAngle(angularDisp.xyz/p0DispAngle, -p0DispAngle);
    FQuat worldToBar1FrameQuat = QuatMultiply(
        QuatFromAxisAngle(float3(0, 1, 0), -bar1Staticangle),
        QuatMultiply(
            FQuat(-initialOrientation.xyz, initialOrientation.w), 
            p0DispReverseQuat
        )
        
    );

    float3 localBar1 = float3(bar1Length, 0, 0);
 
    float3 bar1Velocity[2];
    float3 bar1BiasForce[2];
    float3 bar1Momentum[2];
    
    bar1Velocity[0] = QuatRotateVector(worldToBar1FrameQuat, angularVelocity.xyz);
    bar1Velocity[1] = 0;

    bar1Momentum[0] = mul(bar1BaseInertiaTensor, bar1Velocity[0]);
    bar1Momentum[1] = 0;
    
    spatialForceCross(bar1Velocity, bar1Momentum, bar1BiasForce);
    
    float3 bar1ExternalTorque = QuatRotateVector(
        worldToBar1FrameQuat,
        GetPivotBarTorque(
            dampingCoff,
            wind,
            p1,
            angularVelocity.xyz
        )
    );
    
    bar1BiasForce[1] -= bar1ExternalTorque;
    float3 generalizedBar1Torque = bar1ExternalTorque - stiffness * QuatRotateVector(worldToBar1FrameQuat, angularDisp.xyz);
    
    float3x3 zeroMat = float3x3(
        0, 0, 0,
        0, 0, 0,
        0, 0, 0
    );

    float3x3 bar1ToBar2VelTransformation[2][2] = {
        { zeroMat, zeroMat },
        { zeroMat, zeroMat }
    };
    getSpatialVelocityTransformaton(localBar1, float3(0, -(bar2StaticAngle + angularDisp.w), 0), bar1ToBar2VelTransformation);
    
    
    float3 bar2Velocity[2];
    float3 bar2BiasForce[2];
    float3 bar2Momentum[2];
    float3 bar2VelocityProductAcc[2];

    float3 bar2LocalVelocity[2];
    bar2LocalVelocity[0] = float3(0, angularVelocity.w, 0);
    bar2LocalVelocity[1] = 0;
    SpatialMatVectorMul(bar1ToBar2VelTransformation, bar1Velocity, bar2Velocity);
    bar2Velocity[0] += bar2LocalVelocity[0];
    
    spatioalVelocityCross(bar2Velocity, bar2LocalVelocity, bar2VelocityProductAcc);
    
    bar2Momentum[0] = mul(bar2BaseInertiaTensor, bar2Velocity[0]);
    bar2Momentum[1] = bar2Mass * bar2Velocity[1];
    
    spatialForceCross(bar2Velocity, bar2Momentum, bar2BiasForce);
    
    
    FQuat worldToBar2FrameQuat = QuatMultiply(
        QuatFromAxisAngle(float3(0, 1, 0), -(bar2StaticAngle + angularDisp.w)),
        worldToBar1FrameQuat
    );
    
    float3 bar2ExternalTorque = QuatRotateVector(
        worldToBar2FrameQuat,
        GetBar2Torque(
            dampingCoff,
            wind,
            angularVelocity.xyz,
            p1,
            angularVelocity.w * bar2RotationalAxis,
            bar2
        )
    );
    
    bar2BiasForce[1] -= bar2ExternalTorque; 
    float bar2GeneralizedTorque = bar2ExternalTorque[1] - p1Stiffness * angularDisp.w;
   
    float3x3 bar2InertiaTensorOnBar1[2][2] = {
        { zeroMat, zeroMat },
        { zeroMat, zeroMat }
    };
    bar2InertiaTensorOnBar1[0][0] = bar2BaseInertiaTensor;
    bar2InertiaTensorOnBar1[1][1] = float3x3(
        bar2Mass, 0, 0,
        0, bar2Mass, 0,
        0, 0, bar2Mass
    );
   
    
    float3 bar2InertiaYColum[2];
    bar2InertiaYColum[0] = float3(bar2InertiaTensorOnBar1[0][0][1][0], bar2InertiaTensorOnBar1[0][0][1][1], bar2InertiaTensorOnBar1[0][0][1][2]);
    bar2InertiaYColum[1] = float3(bar2InertiaTensorOnBar1[1][0][1][0], bar2InertiaTensorOnBar1[1][0][1][1], bar2InertiaTensorOnBar1[1][0][1][2]);
    
    
    float weightVal = (bar2GeneralizedTorque - bar2BiasForce[0][1]) / bar2InertiaTensorOnBar1[0][0][1][1];
    
    float3 bar1BiasForceFromBar2[2];
    bar1BiasForceFromBar2[0] = bar2BiasForce[0] + bar2InertiaYColum[0] * weightVal;
    bar1BiasForceFromBar2[1] = bar2BiasForce[1] + bar2InertiaYColum[1] * weightVal;
    
    bar2InertiaTensorOnBar1[0][0] -= OuterProduct(bar2InertiaYColum[0], bar2InertiaYColum[0]) / bar2InertiaTensorOnBar1[0][0][1][1];
    bar2InertiaTensorOnBar1[0][1] -= OuterProduct(bar2InertiaYColum[0], bar2InertiaYColum[1]) / bar2InertiaTensorOnBar1[0][0][1][1];
    
    bar2InertiaTensorOnBar1[1][0] -= OuterProduct(bar2InertiaYColum[1], bar2InertiaYColum[0]) / bar2InertiaTensorOnBar1[0][0][1][1];
    bar2InertiaTensorOnBar1[1][1] -= OuterProduct(bar2InertiaYColum[1], bar2InertiaYColum[1]) / bar2InertiaTensorOnBar1[0][0][1][1];
    
    float3 tempSpatialVec[2];
    SpatialMatVectorMul(bar2InertiaTensorOnBar1, bar2VelocityProductAcc, tempSpatialVec);
    bar1BiasForceFromBar2[0] += tempSpatialVec[0];
    bar1BiasForceFromBar2[1] += tempSpatialVec[1];
    
    float3x3 bar2ToBar1ForceTransformation[2][2] =
    {
        { zeroMat, zeroMat },
        { zeroMat, zeroMat }
    };
    getSpatialForceTransformaton(-localBar1, float3(0, (bar2StaticAngle + angularDisp.w), 0), bar2ToBar1ForceTransformation);
    
    SpatialMatVectorMul(bar2ToBar1ForceTransformation, bar1BiasForceFromBar2, bar1BiasForceFromBar2);
    bar1BiasForce[0] += bar1BiasForceFromBar2[0];
    // bar1BiasForce[1] is not used, so not getting the result
    // bar1BiasForce[1] += bar1BiasForceFromBar2[1];

    
    SpatialMatMul(bar2InertiaTensorOnBar1, bar1ToBar2VelTransformation, bar2InertiaTensorOnBar1);
    SpatialMatMul(bar2ToBar1ForceTransformation, bar2InertiaTensorOnBar1, bar2InertiaTensorOnBar1);

    /*
    float3x3 bar1InertiaTensor[2][2];
    bar1InertiaTensor[0][0] = bar1BaseInertiaTensor;
    
    bar1InertiaTensor[1][1] = float3x3(
        bar1Mass, 0, 0,
        0, bar1Mass, 0,
        0, 0, bar1Mass
    );
    
    bar1InertiaTensor[1][1] = 0;
    
    bar1InertiaTensor[0][1] = 0;
    bar1InertiaTensor[1][0] = 0;
    
    bar1InertiaTensor[0][0] += bar2InertiaTensorOnBar1[0][0];
    bar1InertiaTensor[1][0] += bar2InertiaTensorOnBar1[1][0];
    bar1InertiaTensor[0][1] += bar2InertiaTensorOnBar1[0][1];
    bar1InertiaTensor[1][1] += bar2InertiaTensorOnBar1[1][1];
    */
    
    // bar1BaseInertiaTensor + bar2InertiaTensorOnBar1[0][0] is the intertia on bar1
    // it is a diagonal matrix
    float3 bar1FinalInertia = float3(
        bar1BaseInertiaTensor[0][0] + bar2InertiaTensorOnBar1[0][0][0][0],
        bar1BaseInertiaTensor[1][1] + bar2InertiaTensorOnBar1[0][0][1][1],
        bar1BaseInertiaTensor[2][2] + bar2InertiaTensorOnBar1[0][0][2][2]
    );
    
    bar1FinalInertia = bar1FinalInertia < 0.01 ? 1.0f : bar1FinalInertia;
    
    
    //float3 gravityForce = mul(bar2InertiaTensorOnBar1[0][1], QuatRotateVector(worldToBar1FrameQuat, float3(0.0, 0.0, -9.81)));
    
    float3 p0Acc = (
        generalizedBar1Torque
        - bar1BiasForce[0]
        //+ gravityForce
    ) / bar1FinalInertia;

    float p1Acc = (
        bar2GeneralizedTorque
        - dot(
            bar2VelocityProductAcc[0] + mul(bar1ToBar2VelTransformation[0][0], p0Acc), 
            bar2BaseInertiaTensor[1]
        ) 
        - bar2BiasForce[0][1]

    ) / bar2BaseInertiaTensor[1][1];
    
    p0Acc = QuatRotateVector(FQuat(-worldToBar1FrameQuat.xyz, worldToBar1FrameQuat.w), p0Acc);
   
    float4 velocityDelta = float4(p0Acc, p1Acc) * timeDelta;
    
    angularVelocity += velocityDelta;
        
    float4 dispDelta = angularVelocity * timeDelta; 
    

    // Limit P1 angle displacement so that bar1 does not touch bar2.
    float maxP1AngleDelta = PI_VALUE - P1_ANGLE_THRESHOLD - (bar2StaticAngle + angularDisp.w);
    float minP1AngleDelta = P1_ANGLE_THRESHOLD - PI_VALUE - (bar2StaticAngle + angularDisp.w);
    
    maxP1AngleDelta = maxP1AngleDelta < 0 ? 0 : maxP1AngleDelta;
    minP1AngleDelta = minP1AngleDelta > 0 ? 0 : minP1AngleDelta;
    
    
    if (dispDelta.w < minP1AngleDelta || maxP1AngleDelta < dispDelta.w)
    {
        angularVelocity.w = 0;
        dispDelta.w = clamp(dispDelta.w, minP1AngleDelta, maxP1AngleDelta);
    }
    
    
    if (p0DispAngle < 2 * PI_VALUE)
    {
        limitAngleDispScale(angularDisp.xyz, dispDelta.xyz, angularVelocity.xyz);
    }
    else
    {
        getAngleDispScaleDecreasingDelta(angularDisp.xyz, dispDelta.xyz, angularVelocity.xyz);
    }
    
    float baseToCenterLength = length(legsBottomCenter);

    if (baseToCenterLength - bar1Length < legsCollisionRadius)
    {   
        if (isPlayerColliding)
        {
            getMaximumNonCollidingDelta(bar1Dir, playerCollisionNormal, dispDelta.xyz, angularVelocity.xyz);
        }
        else
        {
            applyCollision(bar1Dir, playerCollisionNormal, playerCollisionThheshold, dispDelta.xyz, angularVelocity.xyz);
        }
    }


    
    if (dot(bar1Dir, groundNormal) < BAR_DOT_GROUND_THRESHOLD)
    {
        getMaximumNonCollidingDelta(bar1Dir, groundNormal, dispDelta.xyz, angularVelocity.xyz);
    }
    else
    {
        applyCollision(bar1Dir, groundNormal, BAR_DOT_GROUND_THRESHOLD, dispDelta.xyz, angularVelocity.xyz);
    }
    
    angularDisp += dispDelta;
        
}


float3 GetWindOnlyDistantBarTorque(
    float3 windForce,
    float3 bar2RotationalAxis,
    float3 bar1,
    float3 bar2
)
{
    
    float bar2Length = length(bar2);
    float windMag = length(windForce);
    float3 bar2CrossWind = cross(bar2, windForce);
        
    float3 l0ForceTerm = (windMag > WIND_MAGNITUDE_THRESHOLD ? length(bar2CrossWind) / (windMag * bar2Length) : 0.0f) * windForce;
    float3 l0Term = cross(bar1, l0ForceTerm);
    float3 l1Term = cross(bar2, l0ForceTerm) ;
        
    return bar2Length * (l0Term + l1Term / 2.0f);
}


float3 GetWindOnlyPivotBarTorque(
    float3 windForce,
    float3 bar
)
{
    float bar_length = length(bar);
    float3 barCrossWind = cross(bar, windForce);
    float windMag = length(windForce);
   
    return (windMag > WIND_MAGNITUDE_THRESHOLD ? length(barCrossWind) * barCrossWind / windMag : 0.0f);
}
    

float4 GetApproximateEquilibriumAngularDisplacement(
    float stiffness,
    float p1Stiffness,
    float3 wind,
    float3 scale,
    float2 p1Position,
    FQuat initialOrientation,
    float3 groundNormal
)
{    
    float2 p1p2XZ = float2(1, 0) - p1Position;
    float p1StaticAngle = Get2DAngle(p1p2XZ) - Get2DAngle(p1Position);
    
    float3 p1 = float3(p1Position.x, 0, p1Position.y) * scale.x;
    float3 p2 = float3(1, 0, 0) * scale.x;
    p1 = QuatRotateVector(initialOrientation, p1);
    p2 = QuatRotateVector(initialOrientation, p2);
    
    float3 r2_rotational_axis = QuatRotateVector(initialOrientation, float3(0, 1, 0));
    float3 bar2 = p2 - p1;

    float3 p0Torque = GetWindOnlyPivotBarTorque(
        wind,
        p1
    ) + GetWindOnlyDistantBarTorque(
        wind,
        r2_rotational_axis,
        p1,
        bar2
    );
        
    float p1Torque = dot(GetWindOnlyPivotBarTorque(wind, bar2), r2_rotational_axis);
        
    float4 angularDisp = float4(p0Torque / stiffness, p1Torque / p1Stiffness);
    float dispAngle = length(angularDisp.xyz);
    if (dispAngle > ANGLE_THRESHOLD)
    {
        angularDisp.xyz = angularDisp.xyz / dispAngle * ANGLE_THRESHOLD;

    }
    
    // Limit P1 angle displacement so that bar1 does not touch bar2.
    float maxP1AngleDelta = PI_VALUE - P1_ANGLE_THRESHOLD - (p1StaticAngle + angularDisp.w);
    float minP1AngleDelta = P1_ANGLE_THRESHOLD - PI_VALUE - (p1StaticAngle + angularDisp.w);
    
    maxP1AngleDelta = maxP1AngleDelta < 0 ? 0 : maxP1AngleDelta;
    minP1AngleDelta = minP1AngleDelta > 0 ? 0 : minP1AngleDelta;
    

    if (angularDisp.w < minP1AngleDelta || maxP1AngleDelta < angularDisp.w)
    {
        angularDisp.w = clamp(angularDisp.w, minP1AngleDelta, maxP1AngleDelta);
    }
    
    float3 bar1Dir = p1 / length(p1);
    float3 zero = float3(0, 0, 0);
    
    if (dot(bar1Dir, groundNormal) < BAR_DOT_GROUND_THRESHOLD)
    {
        getMaximumNonCollidingDelta(bar1Dir, groundNormal, angularDisp.xyz, zero);
    }
    else
    {
        applyCollision(bar1Dir, groundNormal, BAR_DOT_GROUND_THRESHOLD, angularDisp.xyz, zero);
    }
    
    
    return angularDisp;
    
}

#endif //  __ROTATIONAL_DYNAMIC_GRASS_MOTION_HLSL__
