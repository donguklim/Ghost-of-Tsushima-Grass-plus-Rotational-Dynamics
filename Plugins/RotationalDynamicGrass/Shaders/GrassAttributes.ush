#ifndef __ROTATIONAL_DYNAMIC_GRASS_GRASS_ATTRIBUTES_HLSL__
#define __ROTATIONAL_DYNAMIC_GRASS_GRASS_ATTRIBUTES_HLSL__


#include "Common/Constants.ush"
#include "Common/Random.ush"
#include "Common/QuaternionRotation.ush"


float getClumpPositionRandVal(
    float positionNoiseRatio, 
    inout uint clumpSeed, 
    inout uint positionSeed
)
{
    return clamp(FRand(clumpSeed) * GetNoiseMultiplier(positionSeed, positionNoiseRatio), 0.0, 1.0f);

}

void GetGrassttributes(
    uint clumpSeed,
    in float yScaleMin,
    in float yScaleMax,
    in float xScaleMin,
    in float xScaleMax,
    in float stiffnessMin,
    in float stiffnessMax,
    in float p1StiffnessRatioMin,
    in float p1StiffnessRatioMax,
    in float p2StiffnessRatioMin,
    in float positionNoiseRatio,
    in float3 position,
    in FQuat quatRotation,
    out float3 landNormal,
    out float3 scale,
    out FQuat staticOrientation,
    out float stiffness, 
    out float3 colorNoise,
    out float2 p1Position,
    out float2 pivotStiffnessRatio
)
{
    uint positionSeed = ComputeSeedFromPosition(position);
    
    scale = float3(
        lerp(xScaleMin, xScaleMax, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed)),
        lerp(yScaleMin, yScaleMax, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed)),
        1.0f
    );
    
    colorNoise = float3(
        lerp(0.0f, 1.0f, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed)),
        lerp(0.0f, 1.0f, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed)),
        lerp(0.0f, 1.0f, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed))
    );
    p1Position = float2(
        lerp(0.4f, 0.8f, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed)),
        lerp(0.05, 1.0f, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed))
    );
    
    stiffness = lerp(stiffnessMin, stiffnessMax, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed));
    
    float p1StiffnessRatio = lerp(p1StiffnessRatioMin, p1StiffnessRatioMax, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed));
    
    pivotStiffnessRatio = float2(
        p1StiffnessRatio,
        lerp(p2StiffnessRatioMin, p1StiffnessRatio, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed))
    );
    
    landNormal = QuatRotateVector(quatRotation, float3(0, 0, 1));
    FQuat landLocalOrientation = QuatMultiply(
        QuatFromAxisAngle(
            float3(0, 0, 1),
            lerp(-PI_VALUE * 0.9, PI_VALUE * 0.9, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed))
        ),
        // minimum value should be higher or equal to (0.5*PI - acos(BAR_DOT_GROUND_THRESHOLD)) in Common/Constants.ush
        QuatFromAxisAngle(
            float3(0, 1, 0),
            lerp(MIN_BAR1_PITCH, -PI_VALUE * 0.45, getClumpPositionRandVal(positionNoiseRatio, clumpSeed, positionSeed))
        )
    );
    staticOrientation = QuatMultiply(quatRotation, landLocalOrientation);
}

#endif // __ROTATIONAL_DYNAMIC_GRASS_GRASS_ATTRIBUTES_HLSL__
